
KatoBoard3_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003bc8  08003bc8  00013bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be0  08003be0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be8  08003be8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00013be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08003bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000006c  08003c5c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003c5c  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bae2  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b55  00000000  00000000  0002bb77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  0002d6d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  0002e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d0fa  00000000  00000000  0002ee48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca39  00000000  00000000  0004bf42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b39ec  00000000  00000000  0005897b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c367  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003350  00000000  00000000  0010c3bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000006c 	.word	0x2000006c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08003bb0 	.word	0x08003bb0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000070 	.word	0x20000070
 80001c0:	08003bb0 	.word	0x08003bb0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b96e 	b.w	80004b8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	468e      	mov	lr, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	f040 8083 	bne.w	800030c <__udivmoddi4+0x118>
 8000206:	428a      	cmp	r2, r1
 8000208:	4617      	mov	r7, r2
 800020a:	d947      	bls.n	800029c <__udivmoddi4+0xa8>
 800020c:	fab2 f382 	clz	r3, r2
 8000210:	b14b      	cbz	r3, 8000226 <__udivmoddi4+0x32>
 8000212:	f1c3 0120 	rsb	r1, r3, #32
 8000216:	fa05 fe03 	lsl.w	lr, r5, r3
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	409f      	lsls	r7, r3
 8000220:	ea41 0e0e 	orr.w	lr, r1, lr
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	fbbe fcf8 	udiv	ip, lr, r8
 800022e:	fa1f f987 	uxth.w	r9, r7
 8000232:	fb08 e21c 	mls	r2, r8, ip, lr
 8000236:	fb0c f009 	mul.w	r0, ip, r9
 800023a:	0c21      	lsrs	r1, r4, #16
 800023c:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	18ba      	adds	r2, r7, r2
 8000246:	f10c 31ff 	add.w	r1, ip, #4294967295
 800024a:	f080 8118 	bcs.w	800047e <__udivmoddi4+0x28a>
 800024e:	4290      	cmp	r0, r2
 8000250:	f240 8115 	bls.w	800047e <__udivmoddi4+0x28a>
 8000254:	f1ac 0c02 	sub.w	ip, ip, #2
 8000258:	443a      	add	r2, r7
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000260:	fb08 2210 	mls	r2, r8, r0, r2
 8000264:	fb00 f109 	mul.w	r1, r0, r9
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	42a1      	cmp	r1, r4
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x92>
 8000272:	193c      	adds	r4, r7, r4
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 8103 	bcs.w	8000482 <__udivmoddi4+0x28e>
 800027c:	42a1      	cmp	r1, r4
 800027e:	f240 8100 	bls.w	8000482 <__udivmoddi4+0x28e>
 8000282:	3802      	subs	r0, #2
 8000284:	443c      	add	r4, r7
 8000286:	1a64      	subs	r4, r4, r1
 8000288:	2100      	movs	r1, #0
 800028a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa4>
 8000290:	2200      	movs	r2, #0
 8000292:	40dc      	lsrs	r4, r3
 8000294:	e9c6 4200 	strd	r4, r2, [r6]
 8000298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029c:	b902      	cbnz	r2, 80002a0 <__udivmoddi4+0xac>
 800029e:	deff      	udf	#255	; 0xff
 80002a0:	fab2 f382 	clz	r3, r2
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d14f      	bne.n	8000348 <__udivmoddi4+0x154>
 80002a8:	1a8d      	subs	r5, r1, r2
 80002aa:	2101      	movs	r1, #1
 80002ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80002b0:	fa1f f882 	uxth.w	r8, r2
 80002b4:	fbb5 fcfe 	udiv	ip, r5, lr
 80002b8:	fb0e 551c 	mls	r5, lr, ip, r5
 80002bc:	fb08 f00c 	mul.w	r0, r8, ip
 80002c0:	0c22      	lsrs	r2, r4, #16
 80002c2:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80002c6:	42a8      	cmp	r0, r5
 80002c8:	d907      	bls.n	80002da <__udivmoddi4+0xe6>
 80002ca:	197d      	adds	r5, r7, r5
 80002cc:	f10c 32ff 	add.w	r2, ip, #4294967295
 80002d0:	d202      	bcs.n	80002d8 <__udivmoddi4+0xe4>
 80002d2:	42a8      	cmp	r0, r5
 80002d4:	f200 80e9 	bhi.w	80004aa <__udivmoddi4+0x2b6>
 80002d8:	4694      	mov	ip, r2
 80002da:	1a2d      	subs	r5, r5, r0
 80002dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80002e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80002e4:	fb08 f800 	mul.w	r8, r8, r0
 80002e8:	b2a4      	uxth	r4, r4
 80002ea:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002ee:	45a0      	cmp	r8, r4
 80002f0:	d907      	bls.n	8000302 <__udivmoddi4+0x10e>
 80002f2:	193c      	adds	r4, r7, r4
 80002f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f8:	d202      	bcs.n	8000300 <__udivmoddi4+0x10c>
 80002fa:	45a0      	cmp	r8, r4
 80002fc:	f200 80d9 	bhi.w	80004b2 <__udivmoddi4+0x2be>
 8000300:	4610      	mov	r0, r2
 8000302:	eba4 0408 	sub.w	r4, r4, r8
 8000306:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030a:	e7c0      	b.n	800028e <__udivmoddi4+0x9a>
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0x12e>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80b1 	beq.w	8000478 <__udivmoddi4+0x284>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14b      	bne.n	80003c2 <__udivmoddi4+0x1ce>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0x140>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80b9 	bhi.w	80004a6 <__udivmoddi4+0x2b2>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	469e      	mov	lr, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0aa      	beq.n	8000298 <__udivmoddi4+0xa4>
 8000342:	e9c6 4e00 	strd	r4, lr, [r6]
 8000346:	e7a7      	b.n	8000298 <__udivmoddi4+0xa4>
 8000348:	409f      	lsls	r7, r3
 800034a:	f1c3 0220 	rsb	r2, r3, #32
 800034e:	40d1      	lsrs	r1, r2
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fbb1 f0fe 	udiv	r0, r1, lr
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000360:	fa24 f202 	lsr.w	r2, r4, r2
 8000364:	409d      	lsls	r5, r3
 8000366:	fb00 fc08 	mul.w	ip, r0, r8
 800036a:	432a      	orrs	r2, r5
 800036c:	0c15      	lsrs	r5, r2, #16
 800036e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000372:	45ac      	cmp	ip, r5
 8000374:	fa04 f403 	lsl.w	r4, r4, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x19a>
 800037a:	197d      	adds	r5, r7, r5
 800037c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000380:	f080 808f 	bcs.w	80004a2 <__udivmoddi4+0x2ae>
 8000384:	45ac      	cmp	ip, r5
 8000386:	f240 808c 	bls.w	80004a2 <__udivmoddi4+0x2ae>
 800038a:	3802      	subs	r0, #2
 800038c:	443d      	add	r5, r7
 800038e:	eba5 050c 	sub.w	r5, r5, ip
 8000392:	fbb5 f1fe 	udiv	r1, r5, lr
 8000396:	fb0e 5c11 	mls	ip, lr, r1, r5
 800039a:	fb01 f908 	mul.w	r9, r1, r8
 800039e:	b295      	uxth	r5, r2
 80003a0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80003a4:	45a9      	cmp	r9, r5
 80003a6:	d907      	bls.n	80003b8 <__udivmoddi4+0x1c4>
 80003a8:	197d      	adds	r5, r7, r5
 80003aa:	f101 32ff 	add.w	r2, r1, #4294967295
 80003ae:	d274      	bcs.n	800049a <__udivmoddi4+0x2a6>
 80003b0:	45a9      	cmp	r9, r5
 80003b2:	d972      	bls.n	800049a <__udivmoddi4+0x2a6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	eba5 0509 	sub.w	r5, r5, r9
 80003bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80003c0:	e778      	b.n	80002b4 <__udivmoddi4+0xc0>
 80003c2:	f1c1 0720 	rsb	r7, r1, #32
 80003c6:	408b      	lsls	r3, r1
 80003c8:	fa22 fc07 	lsr.w	ip, r2, r7
 80003cc:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d0:	fa25 f407 	lsr.w	r4, r5, r7
 80003d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003d8:	fbb4 f9fe 	udiv	r9, r4, lr
 80003dc:	fa1f f88c 	uxth.w	r8, ip
 80003e0:	fb0e 4419 	mls	r4, lr, r9, r4
 80003e4:	fa20 f307 	lsr.w	r3, r0, r7
 80003e8:	fb09 fa08 	mul.w	sl, r9, r8
 80003ec:	408d      	lsls	r5, r1
 80003ee:	431d      	orrs	r5, r3
 80003f0:	0c2b      	lsrs	r3, r5, #16
 80003f2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f6:	45a2      	cmp	sl, r4
 80003f8:	fa02 f201 	lsl.w	r2, r2, r1
 80003fc:	fa00 f301 	lsl.w	r3, r0, r1
 8000400:	d909      	bls.n	8000416 <__udivmoddi4+0x222>
 8000402:	eb1c 0404 	adds.w	r4, ip, r4
 8000406:	f109 30ff 	add.w	r0, r9, #4294967295
 800040a:	d248      	bcs.n	800049e <__udivmoddi4+0x2aa>
 800040c:	45a2      	cmp	sl, r4
 800040e:	d946      	bls.n	800049e <__udivmoddi4+0x2aa>
 8000410:	f1a9 0902 	sub.w	r9, r9, #2
 8000414:	4464      	add	r4, ip
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	fbb4 f0fe 	udiv	r0, r4, lr
 800041e:	fb0e 4410 	mls	r4, lr, r0, r4
 8000422:	fb00 fa08 	mul.w	sl, r0, r8
 8000426:	b2ad      	uxth	r5, r5
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x24e>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f100 35ff 	add.w	r5, r0, #4294967295
 8000438:	d22d      	bcs.n	8000496 <__udivmoddi4+0x2a2>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d92b      	bls.n	8000496 <__udivmoddi4+0x2a2>
 800043e:	3802      	subs	r0, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	464d      	mov	r5, r9
 8000454:	d319      	bcc.n	800048a <__udivmoddi4+0x296>
 8000456:	d016      	beq.n	8000486 <__udivmoddi4+0x292>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x27e>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb64 0405 	sbc.w	r4, r4, r5
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	431f      	orrs	r7, r3
 800046c:	40cc      	lsrs	r4, r1
 800046e:	e9c6 7400 	strd	r7, r4, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	4631      	mov	r1, r6
 800047a:	4630      	mov	r0, r6
 800047c:	e70c      	b.n	8000298 <__udivmoddi4+0xa4>
 800047e:	468c      	mov	ip, r1
 8000480:	e6eb      	b.n	800025a <__udivmoddi4+0x66>
 8000482:	4610      	mov	r0, r2
 8000484:	e6ff      	b.n	8000286 <__udivmoddi4+0x92>
 8000486:	4543      	cmp	r3, r8
 8000488:	d2e6      	bcs.n	8000458 <__udivmoddi4+0x264>
 800048a:	ebb8 0e02 	subs.w	lr, r8, r2
 800048e:	eb69 050c 	sbc.w	r5, r9, ip
 8000492:	3801      	subs	r0, #1
 8000494:	e7e0      	b.n	8000458 <__udivmoddi4+0x264>
 8000496:	4628      	mov	r0, r5
 8000498:	e7d3      	b.n	8000442 <__udivmoddi4+0x24e>
 800049a:	4611      	mov	r1, r2
 800049c:	e78c      	b.n	80003b8 <__udivmoddi4+0x1c4>
 800049e:	4681      	mov	r9, r0
 80004a0:	e7b9      	b.n	8000416 <__udivmoddi4+0x222>
 80004a2:	4608      	mov	r0, r1
 80004a4:	e773      	b.n	800038e <__udivmoddi4+0x19a>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e749      	b.n	800033e <__udivmoddi4+0x14a>
 80004aa:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ae:	443d      	add	r5, r7
 80004b0:	e713      	b.n	80002da <__udivmoddi4+0xe6>
 80004b2:	3802      	subs	r0, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	e724      	b.n	8000302 <__udivmoddi4+0x10e>

080004b8 <__aeabi_idiv0>:
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop

080004bc <Rotate_Motor>:
static void MX_TIM2_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */

///////////////////////////////////////////////  configure   ////
void Rotate_Motor(MotorNum m, int pwm) {
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	6039      	str	r1, [r7, #0]
 80004c6:	71fb      	strb	r3, [r7, #7]
	switch(m) {
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	2b04      	cmp	r3, #4
 80004cc:	d825      	bhi.n	800051a <Rotate_Motor+0x5e>
 80004ce:	a201      	add	r2, pc, #4	; (adr r2, 80004d4 <Rotate_Motor+0x18>)
 80004d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004d4:	080004f3 	.word	0x080004f3
 80004d8:	080004e9 	.word	0x080004e9
 80004dc:	08000507 	.word	0x08000507
 80004e0:	080004fd 	.word	0x080004fd
 80004e4:	08000511 	.word	0x08000511
		case Front_Left:
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, pwm);
 80004e8:	4b0e      	ldr	r3, [pc, #56]	; (8000524 <Rotate_Motor+0x68>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	683a      	ldr	r2, [r7, #0]
 80004ee:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 80004f0:	e013      	b.n	800051a <Rotate_Motor+0x5e>
		case Front_Right:
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pwm);
 80004f2:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <Rotate_Motor+0x68>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80004fa:	e00e      	b.n	800051a <Rotate_Motor+0x5e>
		case Back_Left:
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_4, pwm);
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <Rotate_Motor+0x68>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	683a      	ldr	r2, [r7, #0]
 8000502:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8000504:	e009      	b.n	800051a <Rotate_Motor+0x5e>
		case Back_Right:
			__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, pwm);
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <Rotate_Motor+0x68>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	683a      	ldr	r2, [r7, #0]
 800050c:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 800050e:	e004      	b.n	800051a <Rotate_Motor+0x5e>
		case Pantagraph:
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm);
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <Rotate_Motor+0x6c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	683a      	ldr	r2, [r7, #0]
 8000516:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8000518:	bf00      	nop
	}
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	bc80      	pop	{r7}
 8000522:	4770      	bx	lr
 8000524:	2000008c 	.word	0x2000008c
 8000528:	20000170 	.word	0x20000170

0800052c <Rotate_Servo>:

void Rotate_Servo(ServoNum m, int pwm) {
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	6039      	str	r1, [r7, #0]
 8000536:	71fb      	strb	r3, [r7, #7]
	switch(m) {
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b02      	cmp	r3, #2
 800053c:	d010      	beq.n	8000560 <Rotate_Servo+0x34>
 800053e:	2b02      	cmp	r3, #2
 8000540:	dc13      	bgt.n	800056a <Rotate_Servo+0x3e>
 8000542:	2b00      	cmp	r3, #0
 8000544:	d002      	beq.n	800054c <Rotate_Servo+0x20>
 8000546:	2b01      	cmp	r3, #1
 8000548:	d005      	beq.n	8000556 <Rotate_Servo+0x2a>
			break;
		case Sendo:
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, pwm);
			break;
	}
}
 800054a:	e00e      	b.n	800056a <Rotate_Servo+0x3e>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm);
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <Rotate_Servo+0x48>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	683a      	ldr	r2, [r7, #0]
 8000552:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8000554:	e009      	b.n	800056a <Rotate_Servo+0x3e>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm);
 8000556:	4b07      	ldr	r3, [pc, #28]	; (8000574 <Rotate_Servo+0x48>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 800055e:	e004      	b.n	800056a <Rotate_Servo+0x3e>
			__HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, pwm);
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <Rotate_Servo+0x4c>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	683a      	ldr	r2, [r7, #0]
 8000566:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8000568:	bf00      	nop
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	20000170 	.word	0x20000170
 8000578:	20000248 	.word	0x20000248

0800057c <Move_Button>:

void Move_Button(uint16_t button) {
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	80fb      	strh	r3, [r7, #6]
	if (button) {
 8000586:	88fb      	ldrh	r3, [r7, #6]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d067      	beq.n	800065c <Move_Button+0xe0>
		uint16_t bit = 1;
 800058c:	2301      	movs	r3, #1
 800058e:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < BUTTON_NUM; ++i) {
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	e05d      	b.n	8000652 <Move_Button+0xd6>
			if (button & bit) {
 8000596:	88fa      	ldrh	r2, [r7, #6]
 8000598:	89fb      	ldrh	r3, [r7, #14]
 800059a:	4013      	ands	r3, r2
 800059c:	b29b      	uxth	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d050      	beq.n	8000644 <Move_Button+0xc8>
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	2b0b      	cmp	r3, #11
 80005a6:	d84e      	bhi.n	8000646 <Move_Button+0xca>
 80005a8:	a201      	add	r2, pc, #4	; (adr r2, 80005b0 <Move_Button+0x34>)
 80005aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ae:	bf00      	nop
 80005b0:	080005e1 	.word	0x080005e1
 80005b4:	080005ef 	.word	0x080005ef
 80005b8:	080005fd 	.word	0x080005fd
 80005bc:	0800060b 	.word	0x0800060b
 80005c0:	08000647 	.word	0x08000647
 80005c4:	08000619 	.word	0x08000619
 80005c8:	08000627 	.word	0x08000627
 80005cc:	08000647 	.word	0x08000647
 80005d0:	08000635 	.word	0x08000635
 80005d4:	0800063d 	.word	0x0800063d
 80005d8:	08000647 	.word	0x08000647
 80005dc:	08000647 	.word	0x08000647
				switch (i) {
					case Up :
						Rotate_Motor(Pantagraph, motor[Pantagraph].MAX);
 80005e0:	4b29      	ldr	r3, [pc, #164]	; (8000688 <Move_Button+0x10c>)
 80005e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80005e4:	4619      	mov	r1, r3
 80005e6:	2004      	movs	r0, #4
 80005e8:	f7ff ff68 	bl	80004bc <Rotate_Motor>
						break;
 80005ec:	e02b      	b.n	8000646 <Move_Button+0xca>
					case Right :
						Rotate_Servo(Sendo, servo[Sendo].MAX);
 80005ee:	4b27      	ldr	r3, [pc, #156]	; (800068c <Move_Button+0x110>)
 80005f0:	6a1b      	ldr	r3, [r3, #32]
 80005f2:	4619      	mov	r1, r3
 80005f4:	2002      	movs	r0, #2
 80005f6:	f7ff ff99 	bl	800052c <Rotate_Servo>
						break;
 80005fa:	e024      	b.n	8000646 <Move_Button+0xca>
					case Down :
						Rotate_Motor(Pantagraph, motor[Pantagraph].MIN);
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <Move_Button+0x10c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4619      	mov	r1, r3
 8000602:	2004      	movs	r0, #4
 8000604:	f7ff ff5a 	bl	80004bc <Rotate_Motor>
						break;
 8000608:	e01d      	b.n	8000646 <Move_Button+0xca>
					case Left :
						Rotate_Servo(Sendo, servo[Sendo].STOP);
 800060a:	4b20      	ldr	r3, [pc, #128]	; (800068c <Move_Button+0x110>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	4619      	mov	r1, r3
 8000610:	2002      	movs	r0, #2
 8000612:	f7ff ff8b 	bl	800052c <Rotate_Servo>
						break;
 8000616:	e016      	b.n	8000646 <Move_Button+0xca>
					case Square :
						break;
					case Cross :
						Rotate_Servo(AR_Back, servo[AR_Back].MIN);
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <Move_Button+0x110>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff84 	bl	800052c <Rotate_Servo>
						break;
 8000624:	e00f      	b.n	8000646 <Move_Button+0xca>
					case Circle :
						Rotate_Servo(AR_Front, servo[AR_Front].MAX);
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <Move_Button+0x110>)
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	4619      	mov	r1, r3
 800062c:	2001      	movs	r0, #1
 800062e:	f7ff ff7d 	bl	800052c <Rotate_Servo>
						break;
 8000632:	e008      	b.n	8000646 <Move_Button+0xca>
					case Triangle :
						break;
					case L1 :
						mode = Manual;
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <Move_Button+0x114>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
						break;
 800063a:	e004      	b.n	8000646 <Move_Button+0xca>
					case R1:
						mode = Auto;
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <Move_Button+0x114>)
 800063e:	2201      	movs	r2, #1
 8000640:	701a      	strb	r2, [r3, #0]
						break;
 8000642:	e000      	b.n	8000646 <Move_Button+0xca>
					case L2:
						break;
					case R2:
						break;
				}
			}
 8000644:	bf00      	nop
			bit <<= 1;
 8000646:	89fb      	ldrh	r3, [r7, #14]
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	81fb      	strh	r3, [r7, #14]
		for (int i = 0; i < BUTTON_NUM; ++i) {
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	3301      	adds	r3, #1
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	220c      	movs	r2, #12
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4293      	cmp	r3, r2
 8000658:	db9d      	blt.n	8000596 <Move_Button+0x1a>
	else {
		Rotate_Servo(AR_Back, servo[AR_Back].STOP);
		Rotate_Servo(AR_Front, servo[AR_Front].STOP);
		Rotate_Motor(Pantagraph, motor[Pantagraph].STOP);
	}
}
 800065a:	e011      	b.n	8000680 <Move_Button+0x104>
		Rotate_Servo(AR_Back, servo[AR_Back].STOP);
 800065c:	4b0b      	ldr	r3, [pc, #44]	; (800068c <Move_Button+0x110>)
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	4619      	mov	r1, r3
 8000662:	2000      	movs	r0, #0
 8000664:	f7ff ff62 	bl	800052c <Rotate_Servo>
		Rotate_Servo(AR_Front, servo[AR_Front].STOP);
 8000668:	4b08      	ldr	r3, [pc, #32]	; (800068c <Move_Button+0x110>)
 800066a:	691b      	ldr	r3, [r3, #16]
 800066c:	4619      	mov	r1, r3
 800066e:	2001      	movs	r0, #1
 8000670:	f7ff ff5c 	bl	800052c <Rotate_Servo>
		Rotate_Motor(Pantagraph, motor[Pantagraph].STOP);
 8000674:	4b04      	ldr	r3, [pc, #16]	; (8000688 <Move_Button+0x10c>)
 8000676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000678:	4619      	mov	r1, r3
 800067a:	2004      	movs	r0, #4
 800067c:	f7ff ff1e 	bl	80004bc <Rotate_Motor>
}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000000 	.word	0x20000000
 800068c:	2000003c 	.word	0x2000003c
 8000690:	2000008a 	.word	0x2000008a

08000694 <Drive>:

int pwm_val[4];
uint8_t rec_buffer[3];
stm32ControllerData stm32Controller;

void Drive() {
 8000694:	b590      	push	{r4, r7, lr}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
	pwm_val[FL] = stm32Controller.FB_L + motor[FL].STOP;
 800069a:	4b67      	ldr	r3, [pc, #412]	; (8000838 <Drive+0x1a4>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b67      	ldr	r3, [pc, #412]	; (800083c <Drive+0x1a8>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a66      	ldr	r2, [pc, #408]	; (8000840 <Drive+0x1ac>)
 80006a6:	6013      	str	r3, [r2, #0]
	pwm_val[FR] = stm32Controller.FB_R + motor[FR].STOP;
 80006a8:	4b63      	ldr	r3, [pc, #396]	; (8000838 <Drive+0x1a4>)
 80006aa:	685a      	ldr	r2, [r3, #4]
 80006ac:	4b63      	ldr	r3, [pc, #396]	; (800083c <Drive+0x1a8>)
 80006ae:	691b      	ldr	r3, [r3, #16]
 80006b0:	4413      	add	r3, r2
 80006b2:	4a63      	ldr	r2, [pc, #396]	; (8000840 <Drive+0x1ac>)
 80006b4:	6053      	str	r3, [r2, #4]
	pwm_val[BL] = stm32Controller.FB_L + motor[BL].STOP;
 80006b6:	4b60      	ldr	r3, [pc, #384]	; (8000838 <Drive+0x1a4>)
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <Drive+0x1a8>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4413      	add	r3, r2
 80006c0:	4a5f      	ldr	r2, [pc, #380]	; (8000840 <Drive+0x1ac>)
 80006c2:	6093      	str	r3, [r2, #8]
	pwm_val[BR] = stm32Controller.FB_R + motor[BR].STOP;
 80006c4:	4b5c      	ldr	r3, [pc, #368]	; (8000838 <Drive+0x1a4>)
 80006c6:	685a      	ldr	r2, [r3, #4]
 80006c8:	4b5c      	ldr	r3, [pc, #368]	; (800083c <Drive+0x1a8>)
 80006ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006cc:	4413      	add	r3, r2
 80006ce:	4a5c      	ldr	r2, [pc, #368]	; (8000840 <Drive+0x1ac>)
 80006d0:	60d3      	str	r3, [r2, #12]

	for (int i = 0; i < 4; ++i) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	e08e      	b.n	80007f6 <Drive+0x162>
		if(pwm_val[i] > motor[i].STOP) {
 80006d8:	4a59      	ldr	r2, [pc, #356]	; (8000840 <Drive+0x1ac>)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006e0:	4856      	ldr	r0, [pc, #344]	; (800083c <Drive+0x1a8>)
 80006e2:	687a      	ldr	r2, [r7, #4]
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4403      	add	r3, r0
 80006ee:	3304      	adds	r3, #4
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4299      	cmp	r1, r3
 80006f4:	dd37      	ble.n	8000766 <Drive+0xd2>
			pwm_val[i] = ((pwm_val[i] - motor[i].STOP) * (motor[i].MAX - motor[i].STOP)) / 100 + motor[i].STOP;
 80006f6:	4a52      	ldr	r2, [pc, #328]	; (8000840 <Drive+0x1ac>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80006fe:	484f      	ldr	r0, [pc, #316]	; (800083c <Drive+0x1a8>)
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	009b      	lsls	r3, r3, #2
 800070a:	4403      	add	r3, r0
 800070c:	3304      	adds	r3, #4
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	1ac9      	subs	r1, r1, r3
 8000712:	484a      	ldr	r0, [pc, #296]	; (800083c <Drive+0x1a8>)
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4403      	add	r3, r0
 8000720:	3308      	adds	r3, #8
 8000722:	6818      	ldr	r0, [r3, #0]
 8000724:	4c45      	ldr	r4, [pc, #276]	; (800083c <Drive+0x1a8>)
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	4613      	mov	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	4413      	add	r3, r2
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4423      	add	r3, r4
 8000732:	3304      	adds	r3, #4
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1ac3      	subs	r3, r0, r3
 8000738:	fb03 f301 	mul.w	r3, r3, r1
 800073c:	4a41      	ldr	r2, [pc, #260]	; (8000844 <Drive+0x1b0>)
 800073e:	fb82 1203 	smull	r1, r2, r2, r3
 8000742:	1152      	asrs	r2, r2, #5
 8000744:	17db      	asrs	r3, r3, #31
 8000746:	1ad1      	subs	r1, r2, r3
 8000748:	483c      	ldr	r0, [pc, #240]	; (800083c <Drive+0x1a8>)
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	4613      	mov	r3, r2
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	4413      	add	r3, r2
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	4403      	add	r3, r0
 8000756:	3304      	adds	r3, #4
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	18ca      	adds	r2, r1, r3
 800075c:	4938      	ldr	r1, [pc, #224]	; (8000840 <Drive+0x1ac>)
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000764:	e044      	b.n	80007f0 <Drive+0x15c>
		}
		else if(pwm_val[i] < motor[i].STOP) {
 8000766:	4a36      	ldr	r2, [pc, #216]	; (8000840 <Drive+0x1ac>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800076e:	4833      	ldr	r0, [pc, #204]	; (800083c <Drive+0x1a8>)
 8000770:	687a      	ldr	r2, [r7, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	005b      	lsls	r3, r3, #1
 8000776:	4413      	add	r3, r2
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	4403      	add	r3, r0
 800077c:	3304      	adds	r3, #4
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4299      	cmp	r1, r3
 8000782:	da35      	bge.n	80007f0 <Drive+0x15c>
			pwm_val[i] = ((pwm_val[i] - motor[i].STOP) * (motor[i].STOP - motor[i].MIN)) / 100 + motor[i].STOP;
 8000784:	4a2e      	ldr	r2, [pc, #184]	; (8000840 <Drive+0x1ac>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800078c:	482b      	ldr	r0, [pc, #172]	; (800083c <Drive+0x1a8>)
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4613      	mov	r3, r2
 8000792:	005b      	lsls	r3, r3, #1
 8000794:	4413      	add	r3, r2
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	4403      	add	r3, r0
 800079a:	3304      	adds	r3, #4
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	1ac9      	subs	r1, r1, r3
 80007a0:	4826      	ldr	r0, [pc, #152]	; (800083c <Drive+0x1a8>)
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4403      	add	r3, r0
 80007ae:	3304      	adds	r3, #4
 80007b0:	6818      	ldr	r0, [r3, #0]
 80007b2:	4c22      	ldr	r4, [pc, #136]	; (800083c <Drive+0x1a8>)
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	009b      	lsls	r3, r3, #2
 80007be:	4423      	add	r3, r4
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	1ac3      	subs	r3, r0, r3
 80007c4:	fb03 f301 	mul.w	r3, r3, r1
 80007c8:	4a1e      	ldr	r2, [pc, #120]	; (8000844 <Drive+0x1b0>)
 80007ca:	fb82 1203 	smull	r1, r2, r2, r3
 80007ce:	1152      	asrs	r2, r2, #5
 80007d0:	17db      	asrs	r3, r3, #31
 80007d2:	1ad1      	subs	r1, r2, r3
 80007d4:	4819      	ldr	r0, [pc, #100]	; (800083c <Drive+0x1a8>)
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	4403      	add	r3, r0
 80007e2:	3304      	adds	r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	18ca      	adds	r2, r1, r3
 80007e8:	4915      	ldr	r1, [pc, #84]	; (8000840 <Drive+0x1ac>)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i = 0; i < 4; ++i) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b03      	cmp	r3, #3
 80007fa:	f77f af6d 	ble.w	80006d8 <Drive+0x44>
		}
	}

	  // rotate motor
	Rotate_Motor(Front_Left, pwm_val[FL]);
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <Drive+0x1ac>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4619      	mov	r1, r3
 8000804:	2001      	movs	r0, #1
 8000806:	f7ff fe59 	bl	80004bc <Rotate_Motor>
	Rotate_Motor(Front_Right, pwm_val[FR]);
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <Drive+0x1ac>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	4619      	mov	r1, r3
 8000810:	2000      	movs	r0, #0
 8000812:	f7ff fe53 	bl	80004bc <Rotate_Motor>
	Rotate_Motor(Back_Left, pwm_val[BL]);
 8000816:	4b0a      	ldr	r3, [pc, #40]	; (8000840 <Drive+0x1ac>)
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	4619      	mov	r1, r3
 800081c:	2003      	movs	r0, #3
 800081e:	f7ff fe4d 	bl	80004bc <Rotate_Motor>
	Rotate_Motor(Back_Right, pwm_val[BR]);
 8000822:	4b07      	ldr	r3, [pc, #28]	; (8000840 <Drive+0x1ac>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	4619      	mov	r1, r3
 8000828:	2002      	movs	r0, #2
 800082a:	f7ff fe47 	bl	80004bc <Rotate_Motor>
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	bd90      	pop	{r4, r7, pc}
 8000836:	bf00      	nop
 8000838:	20000200 	.word	0x20000200
 800083c:	20000000 	.word	0x20000000
 8000840:	20000118 	.word	0x20000118
 8000844:	51eb851f 	.word	0x51eb851f

08000848 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	if (mode == Auto) {
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <HAL_UART_RxCpltCallback+0x40>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d10d      	bne.n	8000874 <HAL_UART_RxCpltCallback+0x2c>
		if (rec_buffer[0] == 'H') {
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <HAL_UART_RxCpltCallback+0x44>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	2b48      	cmp	r3, #72	; 0x48
 800085e:	d109      	bne.n	8000874 <HAL_UART_RxCpltCallback+0x2c>
			stm32Controller.FB_R = rec_buffer[1] - 100;
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <HAL_UART_RxCpltCallback+0x44>)
 8000862:	785b      	ldrb	r3, [r3, #1]
 8000864:	3b64      	subs	r3, #100	; 0x64
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_UART_RxCpltCallback+0x48>)
 8000868:	6053      	str	r3, [r2, #4]
			stm32Controller.FB_L = rec_buffer[2] - 100;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <HAL_UART_RxCpltCallback+0x44>)
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	3b64      	subs	r3, #100	; 0x64
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_UART_RxCpltCallback+0x48>)
 8000872:	6013      	str	r3, [r2, #0]
		}
	}

	HAL_UART_Receive_IT(&huart3, rec_buffer, 3);
 8000874:	2203      	movs	r2, #3
 8000876:	4905      	ldr	r1, [pc, #20]	; (800088c <HAL_UART_RxCpltCallback+0x44>)
 8000878:	4806      	ldr	r0, [pc, #24]	; (8000894 <HAL_UART_RxCpltCallback+0x4c>)
 800087a:	f002 fdba 	bl	80033f2 <HAL_UART_Receive_IT>
}
 800087e:	bf00      	nop
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000008a 	.word	0x2000008a
 800088c:	20000114 	.word	0x20000114
 8000890:	20000200 	.word	0x20000200
 8000894:	200000d4 	.word	0x200000d4

08000898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089e:	f000 fe81 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a2:	f000 f88d 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a6:	f000 fbc7 	bl	8001038 <MX_GPIO_Init>
  MX_TIM8_Init();
 80008aa:	f000 fa4b 	bl	8000d44 <MX_TIM8_Init>
  MX_TIM1_Init();
 80008ae:	f000 f8cf 	bl	8000a50 <MX_TIM1_Init>
  MX_TIM12_Init();
 80008b2:	f000 fb0b 	bl	8000ecc <MX_TIM12_Init>
  MX_USART3_UART_Init();
 80008b6:	f000 fb95 	bl	8000fe4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80008ba:	f000 fb69 	bl	8000f90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008be:	f000 f97f 	bl	8000bc0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008c2:	f000 f9c9 	bl	8000c58 <MX_TIM3_Init>
  //huart3 PC - STM


  // ex) FL: Front Left   BR: Back Right

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);  // FL
 80008c6:	2100      	movs	r1, #0
 80008c8:	4833      	ldr	r0, [pc, #204]	; (8000998 <main+0x100>)
 80008ca:	f001 fe8d 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);  // FR
 80008ce:	2104      	movs	r1, #4
 80008d0:	4831      	ldr	r0, [pc, #196]	; (8000998 <main+0x100>)
 80008d2:	f001 fe89 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);  // BL
 80008d6:	2108      	movs	r1, #8
 80008d8:	482f      	ldr	r0, [pc, #188]	; (8000998 <main+0x100>)
 80008da:	f001 fe85 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);  // BR
 80008de:	210c      	movs	r1, #12
 80008e0:	482d      	ldr	r0, [pc, #180]	; (8000998 <main+0x100>)
 80008e2:	f001 fe81 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // sendo
 80008e6:	2104      	movs	r1, #4
 80008e8:	482c      	ldr	r0, [pc, #176]	; (800099c <main+0x104>)
 80008ea:	f001 fe7d 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // servo_2
 80008ee:	2104      	movs	r1, #4
 80008f0:	482b      	ldr	r0, [pc, #172]	; (80009a0 <main+0x108>)
 80008f2:	f001 fe79 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // panta
 80008f6:	2100      	movs	r1, #0
 80008f8:	482a      	ldr	r0, [pc, #168]	; (80009a4 <main+0x10c>)
 80008fa:	f001 fe75 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2); // servo
 80008fe:	2104      	movs	r1, #4
 8000900:	4828      	ldr	r0, [pc, #160]	; (80009a4 <main+0x10c>)
 8000902:	f001 fe71 	bl	80025e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // servo
 8000906:	2108      	movs	r1, #8
 8000908:	4826      	ldr	r0, [pc, #152]	; (80009a4 <main+0x10c>)
 800090a:	f001 fe6d 	bl	80025e8 <HAL_TIM_PWM_Start>

  HAL_UART_Receive_IT(&huart3, rec_buffer, 3);
 800090e:	2203      	movs	r2, #3
 8000910:	4925      	ldr	r1, [pc, #148]	; (80009a8 <main+0x110>)
 8000912:	4826      	ldr	r0, [pc, #152]	; (80009ac <main+0x114>)
 8000914:	f002 fd6d 	bl	80033f2 <HAL_UART_Receive_IT>

  while (1) {
	  uint8_t tpip_key = '0';
 8000918:	2330      	movs	r3, #48	; 0x30
 800091a:	71fb      	strb	r3, [r7, #7]

	  HAL_UART_Receive(&huart2, (uint8_t *)&tpip_key, sizeof(tpip_key), 0xF);
 800091c:	1df9      	adds	r1, r7, #7
 800091e:	230f      	movs	r3, #15
 8000920:	2201      	movs	r2, #1
 8000922:	4823      	ldr	r0, [pc, #140]	; (80009b0 <main+0x118>)
 8000924:	f002 fcc6 	bl	80032b4 <HAL_UART_Receive>

	  uint8_t power_R = 100; // receive data
 8000928:	2364      	movs	r3, #100	; 0x64
 800092a:	71bb      	strb	r3, [r7, #6]
	  uint8_t power_L = 100; // receive data
 800092c:	2364      	movs	r3, #100	; 0x64
 800092e:	717b      	strb	r3, [r7, #5]

	  if (mode == Manual) {
 8000930:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <main+0x11c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d116      	bne.n	8000966 <main+0xce>
		  if (tpip_key == 'H') {
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	2b48      	cmp	r3, #72	; 0x48
 800093c:	d113      	bne.n	8000966 <main+0xce>
			  HAL_UART_Receive(&huart2, (uint8_t * )&power_R,  sizeof(power_R), 0xF);
 800093e:	1db9      	adds	r1, r7, #6
 8000940:	230f      	movs	r3, #15
 8000942:	2201      	movs	r2, #1
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <main+0x118>)
 8000946:	f002 fcb5 	bl	80032b4 <HAL_UART_Receive>
			  HAL_UART_Receive(&huart2, (uint8_t * )&power_L,  sizeof(power_L), 0xF);
 800094a:	1d79      	adds	r1, r7, #5
 800094c:	230f      	movs	r3, #15
 800094e:	2201      	movs	r2, #1
 8000950:	4817      	ldr	r0, [pc, #92]	; (80009b0 <main+0x118>)
 8000952:	f002 fcaf 	bl	80032b4 <HAL_UART_Receive>

			  stm32Controller.FB_R = power_R - 100;
 8000956:	79bb      	ldrb	r3, [r7, #6]
 8000958:	3b64      	subs	r3, #100	; 0x64
 800095a:	4a17      	ldr	r2, [pc, #92]	; (80009b8 <main+0x120>)
 800095c:	6053      	str	r3, [r2, #4]
			  stm32Controller.FB_L = power_L - 100;
 800095e:	797b      	ldrb	r3, [r7, #5]
 8000960:	3b64      	subs	r3, #100	; 0x64
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <main+0x120>)
 8000964:	6013      	str	r3, [r2, #0]
		  }
	  }

	  if (tpip_key == 'B') {
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	2b42      	cmp	r3, #66	; 0x42
 800096a:	d106      	bne.n	800097a <main+0xe2>
		  HAL_UART_Receive(&huart2, (uint16_t * )&button , sizeof(button), 0xFF);
 800096c:	23ff      	movs	r3, #255	; 0xff
 800096e:	2202      	movs	r2, #2
 8000970:	4912      	ldr	r1, [pc, #72]	; (80009bc <main+0x124>)
 8000972:	480f      	ldr	r0, [pc, #60]	; (80009b0 <main+0x118>)
 8000974:	f002 fc9e 	bl	80032b4 <HAL_UART_Receive>
 8000978:	e005      	b.n	8000986 <main+0xee>
	  }
	  else if (tpip_key == 'N') {
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b4e      	cmp	r3, #78	; 0x4e
 800097e:	d102      	bne.n	8000986 <main+0xee>
		  button = 0;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <main+0x124>)
 8000982:	2200      	movs	r2, #0
 8000984:	801a      	strh	r2, [r3, #0]
	  }

	  Move_Button(button);
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <main+0x124>)
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fdf6 	bl	800057c <Move_Button>

	  Drive();
 8000990:	f7ff fe80 	bl	8000694 <Drive>
  while (1) {
 8000994:	e7c0      	b.n	8000918 <main+0x80>
 8000996:	bf00      	nop
 8000998:	2000008c 	.word	0x2000008c
 800099c:	20000128 	.word	0x20000128
 80009a0:	20000248 	.word	0x20000248
 80009a4:	20000170 	.word	0x20000170
 80009a8:	20000114 	.word	0x20000114
 80009ac:	200000d4 	.word	0x200000d4
 80009b0:	20000208 	.word	0x20000208
 80009b4:	2000008a 	.word	0x2000008a
 80009b8:	20000200 	.word	0x20000200
 80009bc:	20000088 	.word	0x20000088

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b092      	sub	sp, #72	; 0x48
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0318 	add.w	r3, r7, #24
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 f8e6 	bl	8003ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2200      	movs	r2, #0
 80009d8:	601a      	str	r2, [r3, #0]
 80009da:	605a      	str	r2, [r3, #4]
 80009dc:	609a      	str	r2, [r3, #8]
 80009de:	60da      	str	r2, [r3, #12]
 80009e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e2:	2302      	movs	r3, #2
 80009e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e6:	2301      	movs	r3, #1
 80009e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ea:	2310      	movs	r3, #16
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ee:	2302      	movs	r3, #2
 80009f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f2:	2300      	movs	r3, #0
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 80009f6:	230d      	movs	r3, #13
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 80009fa:	23c3      	movs	r3, #195	; 0xc3
 80009fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f904 	bl	8001c18 <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8000a16:	f000 fb79 	bl	800110c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	230f      	movs	r3, #15
 8000a1c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a26:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a32:	1d3b      	adds	r3, r7, #4
 8000a34:	2103      	movs	r1, #3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f001 fb3e 	bl	80020b8 <HAL_RCC_ClockConfig>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000a42:	f000 fb63 	bl	800110c <Error_Handler>
  }
}
 8000a46:	bf00      	nop
 8000a48:	3748      	adds	r7, #72	; 0x48
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
 8000a78:	609a      	str	r2, [r3, #8]
 8000a7a:	60da      	str	r2, [r3, #12]
 8000a7c:	611a      	str	r2, [r3, #16]
 8000a7e:	615a      	str	r2, [r3, #20]
 8000a80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2220      	movs	r2, #32
 8000a86:	2100      	movs	r1, #0
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f003 f889 	bl	8003ba0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8e:	4b4a      	ldr	r3, [pc, #296]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000a90:	4a4a      	ldr	r2, [pc, #296]	; (8000bbc <MX_TIM1_Init+0x16c>)
 8000a92:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240;
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000a96:	22f0      	movs	r2, #240	; 0xf0
 8000a98:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a9a:	4b47      	ldr	r3, [pc, #284]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8000aa0:	4b45      	ldr	r3, [pc, #276]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000aa2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000aa6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa8:	4b43      	ldr	r3, [pc, #268]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aae:	4b42      	ldr	r3, [pc, #264]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab4:	4b40      	ldr	r3, [pc, #256]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000aba:	483f      	ldr	r0, [pc, #252]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000abc:	f001 fcec 	bl	8002498 <HAL_TIM_Base_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ac6:	f000 fb21 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ace:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4838      	ldr	r0, [pc, #224]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000ad8:	f001 ff0c 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ae2:	f000 fb13 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ae6:	4834      	ldr	r0, [pc, #208]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000ae8:	f001 fd25 	bl	8002536 <HAL_TIM_PWM_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000af2:	f000 fb0b 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af6:	2300      	movs	r3, #0
 8000af8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afa:	2300      	movs	r3, #0
 8000afc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000afe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b02:	4619      	mov	r1, r3
 8000b04:	482c      	ldr	r0, [pc, #176]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000b06:	f002 fabd 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b10:	f000 fafc 	bl	800110c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b14:	2360      	movs	r3, #96	; 0x60
 8000b16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b20:	2300      	movs	r3, #0
 8000b22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	2200      	movs	r2, #0
 8000b36:	4619      	mov	r1, r3
 8000b38:	481f      	ldr	r0, [pc, #124]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000b3a:	f001 fe1d 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b44:	f000 fae2 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4819      	ldr	r0, [pc, #100]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000b52:	f001 fe11 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000b5c:	f000 fad6 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b64:	2208      	movs	r2, #8
 8000b66:	4619      	mov	r1, r3
 8000b68:	4813      	ldr	r0, [pc, #76]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000b6a:	f001 fe05 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000b74:	f000 faca 	bl	800110c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b90:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b92:	2300      	movs	r3, #0
 8000b94:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000b9c:	f002 faec 	bl	8003178 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000ba6:	f000 fab1 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000baa:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <MX_TIM1_Init+0x168>)
 8000bac:	f000 fb50 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000bb0:	bf00      	nop
 8000bb2:	3758      	adds	r7, #88	; 0x58
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000170 	.word	0x20000170
 8000bbc:	40010000 	.word	0x40010000

08000bc0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd4:	463b      	mov	r3, r7
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bdc:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000be2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 120;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000be6:	2278      	movs	r2, #120	; 0x78
 8000be8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000bf0:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bf2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bf6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c04:	4813      	ldr	r0, [pc, #76]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c06:	f001 fc47 	bl	8002498 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c10:	f000 fa7c 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c18:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c1a:	f107 0308 	add.w	r3, r7, #8
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c22:	f001 fe67 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c2c:	f000 fa6e 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_TIM2_Init+0x94>)
 8000c3e:	f002 fa21 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c48:	f000 fa60 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3718      	adds	r7, #24
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200001b8 	.word	0x200001b8

08000c58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08e      	sub	sp, #56	; 0x38
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]
 8000c68:	609a      	str	r2, [r3, #8]
 8000c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6c:	f107 0320 	add.w	r3, r7, #32
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c88:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000c8a:	4a2d      	ldr	r2, [pc, #180]	; (8000d40 <MX_TIM3_Init+0xe8>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 120;
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000c90:	2278      	movs	r2, #120	; 0x78
 8000c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b29      	ldr	r3, [pc, #164]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000c9a:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000c9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b24      	ldr	r3, [pc, #144]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cae:	4823      	ldr	r0, [pc, #140]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000cb0:	f001 fbf2 	bl	8002498 <HAL_TIM_Base_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000cba:	f000 fa27 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481c      	ldr	r0, [pc, #112]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000ccc:	f001 fe12 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000cd6:	f000 fa19 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cda:	4818      	ldr	r0, [pc, #96]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000cdc:	f001 fc2b 	bl	8002536 <HAL_TIM_PWM_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000ce6:	f000 fa11 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cea:	2300      	movs	r3, #0
 8000cec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000cfa:	f002 f9c3 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d04:	f000 fa02 	bl	800110c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d08:	2360      	movs	r3, #96	; 0x60
 8000d0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d18:	1d3b      	adds	r3, r7, #4
 8000d1a:	2204      	movs	r2, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000d20:	f001 fd2a 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d2a:	f000 f9ef 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d2e:	4803      	ldr	r0, [pc, #12]	; (8000d3c <MX_TIM3_Init+0xe4>)
 8000d30:	f000 fa8e 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000d34:	bf00      	nop
 8000d36:	3738      	adds	r7, #56	; 0x38
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000128 	.word	0x20000128
 8000d40:	40000400 	.word	0x40000400

08000d44 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b096      	sub	sp, #88	; 0x58
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2220      	movs	r2, #32
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f002 ff0f 	bl	8003ba0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000d82:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000d84:	4a50      	ldr	r2, [pc, #320]	; (8000ec8 <MX_TIM8_Init+0x184>)
 8000d86:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 240;
 8000d88:	4b4e      	ldr	r3, [pc, #312]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000d8a:	22f0      	movs	r2, #240	; 0xf0
 8000d8c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8e:	4b4d      	ldr	r3, [pc, #308]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 9999;
 8000d94:	4b4b      	ldr	r3, [pc, #300]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000d96:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d9a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000da2:	4b48      	ldr	r3, [pc, #288]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dae:	4845      	ldr	r0, [pc, #276]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000db0:	f001 fb72 	bl	8002498 <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000dba:	f000 f9a7 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000dc8:	4619      	mov	r1, r3
 8000dca:	483e      	ldr	r0, [pc, #248]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000dcc:	f001 fd92 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000dd6:	f000 f999 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dda:	483a      	ldr	r0, [pc, #232]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000ddc:	f001 fbab 	bl	8002536 <HAL_TIM_PWM_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000de6:	f000 f991 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dea:	2300      	movs	r3, #0
 8000dec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000df2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000df6:	4619      	mov	r1, r3
 8000df8:	4832      	ldr	r0, [pc, #200]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000dfa:	f002 f943 	bl	8003084 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e04:	f000 f982 	bl	800110c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e08:	2360      	movs	r3, #96	; 0x60
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e20:	2300      	movs	r3, #0
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000e2e:	f001 fca3 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000e38:	f000 f968 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	2204      	movs	r2, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	481f      	ldr	r0, [pc, #124]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000e46:	f001 fc97 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000e50:	f000 f95c 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e58:	2208      	movs	r2, #8
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4819      	ldr	r0, [pc, #100]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000e5e:	f001 fc8b 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000e68:	f000 f950 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	220c      	movs	r2, #12
 8000e72:	4619      	mov	r1, r3
 8000e74:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000e76:	f001 fc7f 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000e80:	f000 f944 	bl	800110c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e90:	2300      	movs	r3, #0
 8000e92:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e9c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000ea8:	f002 f966 	bl	8003178 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8000eb2:	f000 f92b 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <MX_TIM8_Init+0x180>)
 8000eb8:	f000 f9ca 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000ebc:	bf00      	nop
 8000ebe:	3758      	adds	r7, #88	; 0x58
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	2000008c 	.word	0x2000008c
 8000ec8:	40010400 	.word	0x40010400

08000ecc <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b08c      	sub	sp, #48	; 0x30
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ed2:	f107 0320 	add.w	r3, r7, #32
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	605a      	str	r2, [r3, #4]
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
 8000eec:	611a      	str	r2, [r3, #16]
 8000eee:	615a      	str	r2, [r3, #20]
 8000ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8000ef2:	4b25      	ldr	r3, [pc, #148]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000ef4:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <MX_TIM12_Init+0xc0>)
 8000ef6:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 120;
 8000ef8:	4b23      	ldr	r3, [pc, #140]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000efa:	2278      	movs	r2, #120	; 0x78
 8000efc:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b22      	ldr	r3, [pc, #136]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9999;
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f06:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f0a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f12:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8000f18:	481b      	ldr	r0, [pc, #108]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f1a:	f001 fabd 	bl	8002498 <HAL_TIM_Base_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8000f24:	f000 f8f2 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f2c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8000f2e:	f107 0320 	add.w	r3, r7, #32
 8000f32:	4619      	mov	r1, r3
 8000f34:	4814      	ldr	r0, [pc, #80]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f36:	f001 fcdd 	bl	80028f4 <HAL_TIM_ConfigClockSource>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8000f40:	f000 f8e4 	bl	800110c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8000f44:	4810      	ldr	r0, [pc, #64]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f46:	f001 faf6 	bl	8002536 <HAL_TIM_PWM_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8000f50:	f000 f8dc 	bl	800110c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f54:	2360      	movs	r3, #96	; 0x60
 8000f56:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2204      	movs	r2, #4
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f6c:	f001 fc04 	bl	8002778 <HAL_TIM_PWM_ConfigChannel>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 8000f76:	f000 f8c9 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8000f7a:	4803      	ldr	r0, [pc, #12]	; (8000f88 <MX_TIM12_Init+0xbc>)
 8000f7c:	f000 f968 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000f80:	bf00      	nop
 8000f82:	3730      	adds	r7, #48	; 0x30
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000248 	.word	0x20000248
 8000f8c:	40001800 	.word	0x40001800

08000f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_USART2_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f002 f927 	bl	800321a <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f89b 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000208 	.word	0x20000208
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	; (8001034 <MX_USART3_UART_Init+0x50>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 8000ff0:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000ff4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b09      	ldr	r3, [pc, #36]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_USART3_UART_Init+0x4c>)
 800101c:	f002 f8fd 	bl	800321a <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001026:	f000 f871 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200000d4 	.word	0x200000d4
 8001034:	40004800 	.word	0x40004800

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <MX_GPIO_Init+0xcc>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a2b      	ldr	r2, [pc, #172]	; (8001104 <MX_GPIO_Init+0xcc>)
 8001058:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b29      	ldr	r3, [pc, #164]	; (8001104 <MX_GPIO_Init+0xcc>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_GPIO_Init+0xcc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a24      	ldr	r2, [pc, #144]	; (8001104 <MX_GPIO_Init+0xcc>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_GPIO_Init+0xcc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_GPIO_Init+0xcc>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a1d      	ldr	r2, [pc, #116]	; (8001104 <MX_GPIO_Init+0xcc>)
 8001090:	f043 0308 	orr.w	r3, r3, #8
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_GPIO_Init+0xcc>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0308 	and.w	r3, r3, #8
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_GPIO_Init+0xcc>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a16      	ldr	r2, [pc, #88]	; (8001104 <MX_GPIO_Init+0xcc>)
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_GPIO_Init+0xcc>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0304 	and.w	r3, r3, #4
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b10      	ldr	r3, [pc, #64]	; (8001104 <MX_GPIO_Init+0xcc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <MX_GPIO_Init+0xcc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <MX_GPIO_Init+0xcc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ec:	230a      	movs	r3, #10
 80010ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_GPIO_Init+0xd0>)
 80010f8:	f000 fbf0 	bl	80018dc <HAL_GPIO_Init>

}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <HAL_MspInit+0x48>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a0e      	ldr	r2, [pc, #56]	; (8001160 <HAL_MspInit+0x48>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <HAL_MspInit+0x48>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b08      	ldr	r3, [pc, #32]	; (8001160 <HAL_MspInit+0x48>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	4a07      	ldr	r2, [pc, #28]	; (8001160 <HAL_MspInit+0x48>)
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	6413      	str	r3, [r2, #64]	; 0x40
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <HAL_MspInit+0x48>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	40023800 	.word	0x40023800

08001164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001164:	b480      	push	{r7}
 8001166:	b089      	sub	sp, #36	; 0x24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a32      	ldr	r2, [pc, #200]	; (800123c <HAL_TIM_Base_MspInit+0xd8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10e      	bne.n	8001194 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117e:	4a30      	ldr	r2, [pc, #192]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6453      	str	r3, [r2, #68]	; 0x44
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001192:	e04e      	b.n	8001232 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800119c:	d10e      	bne.n	80011bc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	4b27      	ldr	r3, [pc, #156]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a26      	ldr	r2, [pc, #152]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]
}
 80011ba:	e03a      	b.n	8001232 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <HAL_TIM_Base_MspInit+0xe0>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10e      	bne.n	80011e4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	617b      	str	r3, [r7, #20]
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	4a1c      	ldr	r2, [pc, #112]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011d0:	f043 0302 	orr.w	r3, r3, #2
 80011d4:	6413      	str	r3, [r2, #64]	; 0x40
 80011d6:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f003 0302 	and.w	r3, r3, #2
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	697b      	ldr	r3, [r7, #20]
}
 80011e2:	e026      	b.n	8001232 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM8)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a17      	ldr	r2, [pc, #92]	; (8001248 <HAL_TIM_Base_MspInit+0xe4>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10e      	bne.n	800120c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	4a12      	ldr	r2, [pc, #72]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6453      	str	r3, [r2, #68]	; 0x44
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
}
 800120a:	e012      	b.n	8001232 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM12)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_TIM_Base_MspInit+0xe8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d10d      	bne.n	8001232 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 8001220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001224:	6413      	str	r3, [r2, #64]	; 0x40
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_TIM_Base_MspInit+0xdc>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr
 800123c:	40010000 	.word	0x40010000
 8001240:	40023800 	.word	0x40023800
 8001244:	40000400 	.word	0x40000400
 8001248:	40010400 	.word	0x40010400
 800124c:	40001800 	.word	0x40001800

08001250 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a49      	ldr	r2, [pc, #292]	; (8001394 <HAL_TIM_MspPostInit+0x144>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d11f      	bne.n	80012b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	61bb      	str	r3, [r7, #24]
 8001276:	4b48      	ldr	r3, [pc, #288]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a47      	ldr	r2, [pc, #284]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b45      	ldr	r3, [pc, #276]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	61bb      	str	r3, [r7, #24]
 800128c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = DC_Pantagraph_Pin|Servo_Right_Pin|Servo_Left_Pin;
 800128e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f107 031c 	add.w	r3, r7, #28
 80012a8:	4619      	mov	r1, r3
 80012aa:	483c      	ldr	r0, [pc, #240]	; (800139c <HAL_TIM_MspPostInit+0x14c>)
 80012ac:	f000 fb16 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80012b0:	e06c      	b.n	800138c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM3)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a3a      	ldr	r2, [pc, #232]	; (80013a0 <HAL_TIM_MspPostInit+0x150>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d11e      	bne.n	80012fa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	4b35      	ldr	r3, [pc, #212]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 80012c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c4:	4a34      	ldr	r2, [pc, #208]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	6313      	str	r3, [r2, #48]	; 0x30
 80012cc:	4b32      	ldr	r3, [pc, #200]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	f003 0302 	and.w	r3, r3, #2
 80012d4:	617b      	str	r3, [r7, #20]
 80012d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012d8:	2320      	movs	r3, #32
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012e8:	2302      	movs	r3, #2
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	482c      	ldr	r0, [pc, #176]	; (80013a4 <HAL_TIM_MspPostInit+0x154>)
 80012f4:	f000 faf2 	bl	80018dc <HAL_GPIO_Init>
}
 80012f8:	e048      	b.n	800138c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a2a      	ldr	r2, [pc, #168]	; (80013a8 <HAL_TIM_MspPostInit+0x158>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d11f      	bne.n	8001344 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	4b23      	ldr	r3, [pc, #140]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 800130a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130c:	4a22      	ldr	r2, [pc, #136]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 800130e:	f043 0304 	orr.w	r3, r3, #4
 8001312:	6313      	str	r3, [r2, #48]	; 0x30
 8001314:	4b20      	ldr	r3, [pc, #128]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 8001316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = DC_Front_Left_Pin|DC_Front_Right_Pin|DC_Back_Left_Pin|DC_Back_Right_Pin;
 8001320:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001324:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001326:	2302      	movs	r3, #2
 8001328:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132e:	2300      	movs	r3, #0
 8001330:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001332:	2303      	movs	r3, #3
 8001334:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001336:	f107 031c 	add.w	r3, r7, #28
 800133a:	4619      	mov	r1, r3
 800133c:	481b      	ldr	r0, [pc, #108]	; (80013ac <HAL_TIM_MspPostInit+0x15c>)
 800133e:	f000 facd 	bl	80018dc <HAL_GPIO_Init>
}
 8001342:	e023      	b.n	800138c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM12)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a19      	ldr	r2, [pc, #100]	; (80013b0 <HAL_TIM_MspPostInit+0x160>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d11e      	bne.n	800138c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a10      	ldr	r2, [pc, #64]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_TIM_MspPostInit+0x148>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Servo1_Pin;
 800136a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001378:	2300      	movs	r3, #0
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800137c:	2309      	movs	r3, #9
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Servo1_GPIO_Port, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4807      	ldr	r0, [pc, #28]	; (80013a4 <HAL_TIM_MspPostInit+0x154>)
 8001388:	f000 faa8 	bl	80018dc <HAL_GPIO_Init>
}
 800138c:	bf00      	nop
 800138e:	3730      	adds	r7, #48	; 0x30
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40010000 	.word	0x40010000
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40010400 	.word	0x40010400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40001800 	.word	0x40001800

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 031c 	add.w	r3, r7, #28
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a3a      	ldr	r2, [pc, #232]	; (80014bc <HAL_UART_MspInit+0x108>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d134      	bne.n	8001440 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
 80013da:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a38      	ldr	r2, [pc, #224]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ee:	61bb      	str	r3, [r7, #24]
 80013f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a31      	ldr	r2, [pc, #196]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = TPIP_TX_Pin|TPIP_RX_Pin;
 800140e:	2360      	movs	r3, #96	; 0x60
 8001410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141e:	2307      	movs	r3, #7
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	4619      	mov	r1, r3
 8001428:	4826      	ldr	r0, [pc, #152]	; (80014c4 <HAL_UART_MspInit+0x110>)
 800142a:	f000 fa57 	bl	80018dc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2100      	movs	r1, #0
 8001432:	2026      	movs	r0, #38	; 0x26
 8001434:	f000 f9fb 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001438:	2026      	movs	r0, #38	; 0x26
 800143a:	f000 fa14 	bl	8001866 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800143e:	e039      	b.n	80014b4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a20      	ldr	r2, [pc, #128]	; (80014c8 <HAL_UART_MspInit+0x114>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d134      	bne.n	80014b4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6413      	str	r3, [r2, #64]	; 0x40
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <HAL_UART_MspInit+0x10c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PI_TX_Pin|PI_RX_Pin;
 8001482:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148c:	2300      	movs	r3, #0
 800148e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001490:	2303      	movs	r3, #3
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001494:	2307      	movs	r3, #7
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <HAL_UART_MspInit+0x110>)
 80014a0:	f000 fa1c 	bl	80018dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2100      	movs	r1, #0
 80014a8:	2027      	movs	r0, #39	; 0x27
 80014aa:	f000 f9c0 	bl	800182e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014ae:	2027      	movs	r0, #39	; 0x27
 80014b0:	f000 f9d9 	bl	8001866 <HAL_NVIC_EnableIRQ>
}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40004400 	.word	0x40004400
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40004800 	.word	0x40004800

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <NMI_Handler+0x4>

080014d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d2:	b480      	push	{r7}
 80014d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d6:	e7fe      	b.n	80014d6 <HardFault_Handler+0x4>

080014d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014dc:	e7fe      	b.n	80014dc <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	e7fe      	b.n	80014e2 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr

080014f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr

0800150e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001512:	f000 f899 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <USART2_IRQHandler+0x10>)
 8001522:	f001 ffbb 	bl	800349c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000208 	.word	0x20000208

08001530 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <USART3_IRQHandler+0x10>)
 8001536:	f001 ffb1 	bl	800349c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200000d4 	.word	0x200000d4

08001544 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001554:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001556:	e003      	b.n	8001560 <LoopCopyDataInit>

08001558 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800155a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800155c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800155e:	3104      	adds	r1, #4

08001560 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001564:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001566:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001568:	d3f6      	bcc.n	8001558 <CopyDataInit>
  ldr  r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800156c:	e002      	b.n	8001574 <LoopFillZerobss>

0800156e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 800156e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001570:	f842 3b04 	str.w	r3, [r2], #4

08001574 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001576:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001578:	d3f9      	bcc.n	800156e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800157a:	f7ff ffe3 	bl	8001544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f002 faeb 	bl	8003b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff f989 	bl	8000898 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001588:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800158c:	08003bf0 	.word	0x08003bf0
  ldr  r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001594:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8001598:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 800159c:	20000294 	.word	0x20000294

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f923 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fd9e 	bl	8001118 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f93b 	bl	8001882 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f903 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000060 	.word	0x20000060
 8001640:	20000068 	.word	0x20000068
 8001644:	20000064 	.word	0x20000064

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_IncTick+0x1c>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_IncTick+0x20>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_IncTick+0x20>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	20000068 	.word	0x20000068
 8001668:	20000290 	.word	0x20000290

0800166c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return uwTick;
 8001670:	4b02      	ldr	r3, [pc, #8]	; (800167c <HAL_GetTick+0x10>)
 8001672:	681b      	ldr	r3, [r3, #0]
}
 8001674:	4618      	mov	r0, r3
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	20000290 	.word	0x20000290

08001680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001696:	68ba      	ldr	r2, [r7, #8]
 8001698:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016b2:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <__NVIC_SetPriorityGrouping+0x44>)
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	60d3      	str	r3, [r2, #12]
}
 80016b8:	bf00      	nop
 80016ba:	3714      	adds	r7, #20
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016cc:	4b04      	ldr	r3, [pc, #16]	; (80016e0 <__NVIC_GetPriorityGrouping+0x18>)
 80016ce:	68db      	ldr	r3, [r3, #12]
 80016d0:	0a1b      	lsrs	r3, r3, #8
 80016d2:	f003 0307 	and.w	r3, r3, #7
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	bc80      	pop	{r7}
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000ed00 	.word	0xe000ed00

080016e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	db0b      	blt.n	800170e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	f003 021f 	and.w	r2, r3, #31
 80016fc:	4906      	ldr	r1, [pc, #24]	; (8001718 <__NVIC_EnableIRQ+0x34>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	2001      	movs	r0, #1
 8001706:	fa00 f202 	lsl.w	r2, r0, r2
 800170a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	e000e100 	.word	0xe000e100

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	; (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	; (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	; 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff90 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	; (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff2d 	bl	8001680 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff42 	bl	80016c8 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff90 	bl	8001770 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5f 	bl	800171c <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff ff35 	bl	80016e4 <__NVIC_EnableIRQ>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f7ff ffa2 	bl	80017d4 <SysTick_Config>
 8001890:	4603      	mov	r3, r0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2280      	movs	r2, #128	; 0x80
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e00c      	b.n	80018d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2205      	movs	r2, #5
 80018bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b087      	sub	sp, #28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ea:	e16f      	b.n	8001bcc <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2101      	movs	r1, #1
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	fa01 f303 	lsl.w	r3, r1, r3
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8161 	beq.w	8001bc6 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d00b      	beq.n	8001924 <HAL_GPIO_Init+0x48>
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001918:	2b11      	cmp	r3, #17
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b12      	cmp	r3, #18
 8001922:	d130      	bne.n	8001986 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195a:	2201      	movs	r2, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	f003 0201 	and.w	r2, r3, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	2203      	movs	r2, #3
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	4013      	ands	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	60da      	str	r2, [r3, #12]

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0xea>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d123      	bne.n	8001a0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4013      	ands	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	691a      	ldr	r2, [r3, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	fa02 f303 	lsl.w	r3, r2, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	6939      	ldr	r1, [r7, #16]
 8001a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	4013      	ands	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0203 	and.w	r2, r3, #3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f000 80bb 	beq.w	8001bc6 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	4b64      	ldr	r3, [pc, #400]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a58:	4a63      	ldr	r2, [pc, #396]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a60:	4b61      	ldr	r3, [pc, #388]	; (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a6c:	4a5f      	ldr	r2, [pc, #380]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	089b      	lsrs	r3, r3, #2
 8001a72:	3302      	adds	r3, #2
 8001a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	220f      	movs	r2, #15
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	43db      	mvns	r3, r3
 8001a8a:	693a      	ldr	r2, [r7, #16]
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a57      	ldr	r2, [pc, #348]	; (8001bf0 <HAL_GPIO_Init+0x314>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d031      	beq.n	8001afc <HAL_GPIO_Init+0x220>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_GPIO_Init+0x318>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d02b      	beq.n	8001af8 <HAL_GPIO_Init+0x21c>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a55      	ldr	r2, [pc, #340]	; (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d025      	beq.n	8001af4 <HAL_GPIO_Init+0x218>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a54      	ldr	r2, [pc, #336]	; (8001bfc <HAL_GPIO_Init+0x320>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d01f      	beq.n	8001af0 <HAL_GPIO_Init+0x214>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a53      	ldr	r2, [pc, #332]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d019      	beq.n	8001aec <HAL_GPIO_Init+0x210>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a52      	ldr	r2, [pc, #328]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_GPIO_Init+0x20c>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4a51      	ldr	r2, [pc, #324]	; (8001c08 <HAL_GPIO_Init+0x32c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d00d      	beq.n	8001ae4 <HAL_GPIO_Init+0x208>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a50      	ldr	r2, [pc, #320]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d007      	beq.n	8001ae0 <HAL_GPIO_Init+0x204>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	4a4f      	ldr	r2, [pc, #316]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d101      	bne.n	8001adc <HAL_GPIO_Init+0x200>
 8001ad8:	2308      	movs	r3, #8
 8001ada:	e010      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001adc:	2309      	movs	r3, #9
 8001ade:	e00e      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	e00c      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001ae4:	2306      	movs	r3, #6
 8001ae6:	e00a      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001ae8:	2305      	movs	r3, #5
 8001aea:	e008      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001aec:	2304      	movs	r3, #4
 8001aee:	e006      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001af0:	2303      	movs	r3, #3
 8001af2:	e004      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e002      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001af8:	2301      	movs	r3, #1
 8001afa:	e000      	b.n	8001afe <HAL_GPIO_Init+0x222>
 8001afc:	2300      	movs	r3, #0
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	f002 0203 	and.w	r2, r2, #3
 8001b04:	0092      	lsls	r2, r2, #2
 8001b06:	4093      	lsls	r3, r2
 8001b08:	461a      	mov	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b10:	4936      	ldr	r1, [pc, #216]	; (8001bec <HAL_GPIO_Init+0x310>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1e:	4b3d      	ldr	r3, [pc, #244]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	693a      	ldr	r2, [r7, #16]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b42:	4a34      	ldr	r2, [pc, #208]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b48:	4b32      	ldr	r3, [pc, #200]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b6c:	4a29      	ldr	r2, [pc, #164]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b96:	4a1f      	ldr	r2, [pc, #124]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b1d      	ldr	r3, [pc, #116]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f47f ae88 	bne.w	80018ec <HAL_GPIO_Init+0x10>
  }
}
 8001bdc:	bf00      	nop
 8001bde:	bf00      	nop
 8001be0:	371c      	adds	r7, #28
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40021400 	.word	0x40021400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40021c00 	.word	0x40021c00
 8001c10:	40022000 	.word	0x40022000
 8001c14:	40013c00 	.word	0x40013c00

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e237      	b.n	800209a <HAL_RCC_OscConfig+0x482>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d050      	beq.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c36:	4ba3      	ldr	r3, [pc, #652]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b04      	cmp	r3, #4
 8001c40:	d00c      	beq.n	8001c5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c42:	4ba0      	ldr	r3, [pc, #640]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d112      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4b9d      	ldr	r3, [pc, #628]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c5a:	d10b      	bne.n	8001c74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5c:	4b99      	ldr	r3, [pc, #612]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d036      	beq.n	8001cd6 <HAL_RCC_OscConfig+0xbe>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d132      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e212      	b.n	800209a <HAL_RCC_OscConfig+0x482>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4b93      	ldr	r3, [pc, #588]	; (8001ec8 <HAL_RCC_OscConfig+0x2b0>)
 8001c7a:	b2d2      	uxtb	r2, r2
 8001c7c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d013      	beq.n	8001cae <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fcf1 	bl	800166c <HAL_GetTick>
 8001c8a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c8e:	f7ff fced 	bl	800166c <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	6a3b      	ldr	r3, [r7, #32]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e1fc      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca0:	4b88      	ldr	r3, [pc, #544]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x76>
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7ff fcdd 	bl	800166c <HAL_GetTick>
 8001cb2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fcd9 	bl	800166c <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	6a3b      	ldr	r3, [r7, #32]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	; 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e1e8      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc8:	4b7e      	ldr	r3, [pc, #504]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d1f0      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x9e>
 8001cd4:	e000      	b.n	8001cd8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d077      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ce4:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 030c 	and.w	r3, r3, #12
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00b      	beq.n	8001d08 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cf0:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d126      	bne.n	8001d4a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfc:	4b71      	ldr	r3, [pc, #452]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d120      	bne.n	8001d4a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d08:	4b6e      	ldr	r3, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <HAL_RCC_OscConfig+0x108>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d001      	beq.n	8001d20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e1bc      	b.n	800209a <HAL_RCC_OscConfig+0x482>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	21f8      	movs	r1, #248	; 0xf8
 8001d2e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d30:	69b9      	ldr	r1, [r7, #24]
 8001d32:	fa91 f1a1 	rbit	r1, r1
 8001d36:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d38:	6979      	ldr	r1, [r7, #20]
 8001d3a:	fab1 f181 	clz	r1, r1
 8001d3e:	b2c9      	uxtb	r1, r1
 8001d40:	408b      	lsls	r3, r1
 8001d42:	4960      	ldr	r1, [pc, #384]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	4313      	orrs	r3, r2
 8001d46:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d48:	e044      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d02a      	beq.n	8001da8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d52:	4b5e      	ldr	r3, [pc, #376]	; (8001ecc <HAL_RCC_OscConfig+0x2b4>)
 8001d54:	2201      	movs	r2, #1
 8001d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d58:	f7ff fc88 	bl	800166c <HAL_GetTick>
 8001d5c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5e:	e008      	b.n	8001d72 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d60:	f7ff fc84 	bl	800166c <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d901      	bls.n	8001d72 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e193      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d72:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0302 	and.w	r3, r3, #2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d0f0      	beq.n	8001d60 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	21f8      	movs	r1, #248	; 0xf8
 8001d8c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	6939      	ldr	r1, [r7, #16]
 8001d90:	fa91 f1a1 	rbit	r1, r1
 8001d94:	60f9      	str	r1, [r7, #12]
  return result;
 8001d96:	68f9      	ldr	r1, [r7, #12]
 8001d98:	fab1 f181 	clz	r1, r1
 8001d9c:	b2c9      	uxtb	r1, r1
 8001d9e:	408b      	lsls	r3, r1
 8001da0:	4948      	ldr	r1, [pc, #288]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	600b      	str	r3, [r1, #0]
 8001da6:	e015      	b.n	8001dd4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da8:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <HAL_RCC_OscConfig+0x2b4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fc5d 	bl	800166c <HAL_GetTick>
 8001db2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db6:	f7ff fc59 	bl	800166c <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e168      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc8:	4b3e      	ldr	r3, [pc, #248]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1f0      	bne.n	8001db6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d030      	beq.n	8001e42 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d016      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de8:	4b39      	ldr	r3, [pc, #228]	; (8001ed0 <HAL_RCC_OscConfig+0x2b8>)
 8001dea:	2201      	movs	r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fc3d 	bl	800166c <HAL_GetTick>
 8001df2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df4:	e008      	b.n	8001e08 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001df6:	f7ff fc39 	bl	800166c <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d901      	bls.n	8001e08 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e148      	b.n	800209a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e08:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e0c:	f003 0302 	and.w	r3, r3, #2
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d0f0      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1de>
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_RCC_OscConfig+0x2b8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fc26 	bl	800166c <HAL_GetTick>
 8001e20:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff fc22 	bl	800166c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	6a3b      	ldr	r3, [r7, #32]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e131      	b.n	800209a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8088 	beq.w	8001f60 <HAL_RCC_OscConfig+0x348>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d110      	bne.n	8001e84 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	4b17      	ldr	r3, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a16      	ldr	r2, [pc, #88]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b14      	ldr	r3, [pc, #80]	; (8001ec4 <HAL_RCC_OscConfig+0x2ac>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_RCC_OscConfig+0x2bc>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <HAL_RCC_OscConfig+0x2bc>)
 8001e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	4b10      	ldr	r3, [pc, #64]	; (8001ed4 <HAL_RCC_OscConfig+0x2bc>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d123      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9c:	4b0d      	ldr	r3, [pc, #52]	; (8001ed4 <HAL_RCC_OscConfig+0x2bc>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a0c      	ldr	r2, [pc, #48]	; (8001ed4 <HAL_RCC_OscConfig+0x2bc>)
 8001ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fbe0 	bl	800166c <HAL_GetTick>
 8001eac:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	e013      	b.n	8001ed8 <HAL_RCC_OscConfig+0x2c0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb0:	f7ff fbdc 	bl	800166c <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	6a3b      	ldr	r3, [r7, #32]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d90c      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x2c0>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0eb      	b.n	800209a <HAL_RCC_OscConfig+0x482>
 8001ec2:	bf00      	nop
 8001ec4:	40023800 	.word	0x40023800
 8001ec8:	40023802 	.word	0x40023802
 8001ecc:	42470000 	.word	0x42470000
 8001ed0:	42470e80 	.word	0x42470e80
 8001ed4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed8:	4b72      	ldr	r3, [pc, #456]	; (80020a4 <HAL_RCC_OscConfig+0x48c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0e5      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x298>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b6f      	ldr	r3, [pc, #444]	; (80020a8 <HAL_RCC_OscConfig+0x490>)
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d015      	beq.n	8001f22 <HAL_RCC_OscConfig+0x30a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fbb9 	bl	800166c <HAL_GetTick>
 8001efa:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efc:	e00a      	b.n	8001f14 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001efe:	f7ff fbb5 	bl	800166c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	6a3b      	ldr	r3, [r7, #32]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d901      	bls.n	8001f14 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e0c2      	b.n	800209a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f14:	4b65      	ldr	r3, [pc, #404]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d0ee      	beq.n	8001efe <HAL_RCC_OscConfig+0x2e6>
 8001f20:	e014      	b.n	8001f4c <HAL_RCC_OscConfig+0x334>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fba3 	bl	800166c <HAL_GetTick>
 8001f26:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f28:	e00a      	b.n	8001f40 <HAL_RCC_OscConfig+0x328>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f2a:	f7ff fb9f 	bl	800166c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	6a3b      	ldr	r3, [r7, #32]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d901      	bls.n	8001f40 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e0ac      	b.n	800209a <HAL_RCC_OscConfig+0x482>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f40:	4b5a      	ldr	r3, [pc, #360]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1ee      	bne.n	8001f2a <HAL_RCC_OscConfig+0x312>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x348>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b55      	ldr	r3, [pc, #340]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	4a54      	ldr	r2, [pc, #336]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 8097 	beq.w	8002098 <HAL_RCC_OscConfig+0x480>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	4b50      	ldr	r3, [pc, #320]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d061      	beq.n	800203a <HAL_RCC_OscConfig+0x422>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d146      	bne.n	800200c <HAL_RCC_OscConfig+0x3f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x498>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7ff fb72 	bl	800166c <HAL_GetTick>
 8001f88:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x386>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff fb6e 	bl	800166c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x386>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e07d      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b43      	ldr	r3, [pc, #268]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x374>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001faa:	4b40      	ldr	r3, [pc, #256]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_OscConfig+0x49c>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	687a      	ldr	r2, [r7, #4]
 8001fb4:	69d1      	ldr	r1, [r2, #28]
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6a12      	ldr	r2, [r2, #32]
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc0:	0192      	lsls	r2, r2, #6
 8001fc2:	4311      	orrs	r1, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fc8:	0612      	lsls	r2, r2, #24
 8001fca:	4311      	orrs	r1, r2
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fd0:	0852      	lsrs	r2, r2, #1
 8001fd2:	3a01      	subs	r2, #1
 8001fd4:	0412      	lsls	r2, r2, #16
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	4934      	ldr	r1, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fde:	4b34      	ldr	r3, [pc, #208]	; (80020b0 <HAL_RCC_OscConfig+0x498>)
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fb42 	bl	800166c <HAL_GetTick>
 8001fe8:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x3e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff fb3e 	bl	800166c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x3e6>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e04d      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ffe:	4b2b      	ldr	r3, [pc, #172]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x3d4>
 800200a:	e045      	b.n	8002098 <HAL_RCC_OscConfig+0x480>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b28      	ldr	r3, [pc, #160]	; (80020b0 <HAL_RCC_OscConfig+0x498>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fb2b 	bl	800166c <HAL_GetTick>
 8002016:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x414>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff fb27 	bl	800166c <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b64      	cmp	r3, #100	; 0x64
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x414>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e036      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202c:	4b1f      	ldr	r3, [pc, #124]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x402>
 8002038:	e02e      	b.n	8002098 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	2b01      	cmp	r3, #1
 8002040:	d101      	bne.n	8002046 <HAL_RCC_OscConfig+0x42e>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e029      	b.n	800209a <HAL_RCC_OscConfig+0x482>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8002046:	4b19      	ldr	r3, [pc, #100]	; (80020ac <HAL_RCC_OscConfig+0x494>)
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	429a      	cmp	r2, r3
 8002058:	d11c      	bne.n	8002094 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002064:	429a      	cmp	r2, r3
 8002066:	d115      	bne.n	8002094 <HAL_RCC_OscConfig+0x47c>
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	099b      	lsrs	r3, r3, #6
 800206c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002074:	429a      	cmp	r2, r3
 8002076:	d10d      	bne.n	8002094 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           ((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x47c>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x482>
        }
      }
    }
  }
  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3728      	adds	r7, #40	; 0x28
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40007000 	.word	0x40007000
 80020a8:	40023870 	.word	0x40023870
 80020ac:	40023800 	.word	0x40023800
 80020b0:	42470060 	.word	0x42470060
 80020b4:	f0bc8000 	.word	0xf0bc8000

080020b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d2      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6b      	ldr	r3, [pc, #428]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d90c      	bls.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b66      	ldr	r3, [pc, #408]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0be      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800210c:	4b5c      	ldr	r3, [pc, #368]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	4a55      	ldr	r2, [pc, #340]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800212e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4950      	ldr	r1, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d040      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b4a      	ldr	r3, [pc, #296]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d115      	bne.n	800218e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e085      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d107      	bne.n	800217e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800216e:	4b44      	ldr	r3, [pc, #272]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d109      	bne.n	800218e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e079      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217e:	4b40      	ldr	r3, [pc, #256]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e071      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800218e:	4b3c      	ldr	r3, [pc, #240]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f023 0203 	bic.w	r2, r3, #3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	4939      	ldr	r1, [pc, #228]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 800219c:	4313      	orrs	r3, r2
 800219e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a0:	f7ff fa64 	bl	800166c <HAL_GetTick>
 80021a4:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a6:	e00a      	b.n	80021be <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a8:	f7ff fa60 	bl	800166c <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e059      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021be:	4b30      	ldr	r3, [pc, #192]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 020c 	and.w	r2, r3, #12
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d1eb      	bne.n	80021a8 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d0:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 030f 	and.w	r3, r3, #15
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d20c      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021de:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e6:	4b25      	ldr	r3, [pc, #148]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d001      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e03c      	b.n	8002272 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d008      	beq.n	8002216 <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002204:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	491b      	ldr	r1, [pc, #108]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002212:	4313      	orrs	r3, r2
 8002214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0308 	and.w	r3, r3, #8
 800221e:	2b00      	cmp	r3, #0
 8002220:	d009      	beq.n	8002236 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002222:	4b17      	ldr	r3, [pc, #92]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4913      	ldr	r1, [pc, #76]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002232:	4313      	orrs	r3, r2
 8002234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8002236:	f000 f82b 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800223a:	4601      	mov	r1, r0
 800223c:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002244:	22f0      	movs	r2, #240	; 0xf0
 8002246:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	fa92 f2a2 	rbit	r2, r2
 800224e:	60fa      	str	r2, [r7, #12]
  return result;
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	fab2 f282 	clz	r2, r2
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	40d3      	lsrs	r3, r2
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 800225c:	5cd3      	ldrb	r3, [r2, r3]
 800225e:	fa21 f303 	lsr.w	r3, r1, r3
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1d4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f9bc 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023c00 	.word	0x40023c00
 8002280:	40023800 	.word	0x40023800
 8002284:	08003bc8 	.word	0x08003bc8
 8002288:	20000060 	.word	0x20000060
 800228c:	20000064 	.word	0x20000064

08002290 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002296:	2100      	movs	r1, #0
 8002298:	6079      	str	r1, [r7, #4]
 800229a:	2100      	movs	r1, #0
 800229c:	60f9      	str	r1, [r7, #12]
 800229e:	2100      	movs	r1, #0
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80022a2:	2100      	movs	r1, #0
 80022a4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a6:	4952      	ldr	r1, [pc, #328]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80022a8:	6889      	ldr	r1, [r1, #8]
 80022aa:	f001 010c 	and.w	r1, r1, #12
 80022ae:	2908      	cmp	r1, #8
 80022b0:	d00d      	beq.n	80022ce <HAL_RCC_GetSysClockFreq+0x3e>
 80022b2:	2908      	cmp	r1, #8
 80022b4:	f200 8094 	bhi.w	80023e0 <HAL_RCC_GetSysClockFreq+0x150>
 80022b8:	2900      	cmp	r1, #0
 80022ba:	d002      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x32>
 80022bc:	2904      	cmp	r1, #4
 80022be:	d003      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x38>
 80022c0:	e08e      	b.n	80023e0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022c2:	4b4c      	ldr	r3, [pc, #304]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80022c4:	60bb      	str	r3, [r7, #8]
       break;
 80022c6:	e08e      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c8:	4b4b      	ldr	r3, [pc, #300]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80022ca:	60bb      	str	r3, [r7, #8]
      break;
 80022cc:	e08b      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ce:	4948      	ldr	r1, [pc, #288]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80022d0:	6849      	ldr	r1, [r1, #4]
 80022d2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80022d6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d8:	4945      	ldr	r1, [pc, #276]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80022da:	6849      	ldr	r1, [r1, #4]
 80022dc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80022e0:	2900      	cmp	r1, #0
 80022e2:	d024      	beq.n	800232e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022e4:	4942      	ldr	r1, [pc, #264]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80022e6:	6849      	ldr	r1, [r1, #4]
 80022e8:	0989      	lsrs	r1, r1, #6
 80022ea:	4608      	mov	r0, r1
 80022ec:	f04f 0100 	mov.w	r1, #0
 80022f0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80022f4:	f04f 0500 	mov.w	r5, #0
 80022f8:	ea00 0204 	and.w	r2, r0, r4
 80022fc:	ea01 0305 	and.w	r3, r1, r5
 8002300:	493d      	ldr	r1, [pc, #244]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002302:	fb01 f003 	mul.w	r0, r1, r3
 8002306:	2100      	movs	r1, #0
 8002308:	fb01 f102 	mul.w	r1, r1, r2
 800230c:	1844      	adds	r4, r0, r1
 800230e:	493a      	ldr	r1, [pc, #232]	; (80023f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8002310:	fba2 0101 	umull	r0, r1, r2, r1
 8002314:	1863      	adds	r3, r4, r1
 8002316:	4619      	mov	r1, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	f7fd ff50 	bl	80001c4 <__aeabi_uldivmod>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4613      	mov	r3, r2
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	e04a      	b.n	80023c4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	099b      	lsrs	r3, r3, #6
 8002334:	461a      	mov	r2, r3
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800233e:	f04f 0100 	mov.w	r1, #0
 8002342:	ea02 0400 	and.w	r4, r2, r0
 8002346:	ea03 0501 	and.w	r5, r3, r1
 800234a:	4620      	mov	r0, r4
 800234c:	4629      	mov	r1, r5
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	014b      	lsls	r3, r1, #5
 8002358:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800235c:	0142      	lsls	r2, r0, #5
 800235e:	4610      	mov	r0, r2
 8002360:	4619      	mov	r1, r3
 8002362:	1b00      	subs	r0, r0, r4
 8002364:	eb61 0105 	sbc.w	r1, r1, r5
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	018b      	lsls	r3, r1, #6
 8002372:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002376:	0182      	lsls	r2, r0, #6
 8002378:	1a12      	subs	r2, r2, r0
 800237a:	eb63 0301 	sbc.w	r3, r3, r1
 800237e:	f04f 0000 	mov.w	r0, #0
 8002382:	f04f 0100 	mov.w	r1, #0
 8002386:	00d9      	lsls	r1, r3, #3
 8002388:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800238c:	00d0      	lsls	r0, r2, #3
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	1912      	adds	r2, r2, r4
 8002394:	eb45 0303 	adc.w	r3, r5, r3
 8002398:	f04f 0000 	mov.w	r0, #0
 800239c:	f04f 0100 	mov.w	r1, #0
 80023a0:	0299      	lsls	r1, r3, #10
 80023a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80023a6:	0290      	lsls	r0, r2, #10
 80023a8:	4602      	mov	r2, r0
 80023aa:	460b      	mov	r3, r1
 80023ac:	4610      	mov	r0, r2
 80023ae:	4619      	mov	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	461a      	mov	r2, r3
 80023b4:	f04f 0300 	mov.w	r3, #0
 80023b8:	f7fd ff04 	bl	80001c4 <__aeabi_uldivmod>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4613      	mov	r3, r2
 80023c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c4:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	0c1b      	lsrs	r3, r3, #16
 80023ca:	f003 0303 	and.w	r3, r3, #3
 80023ce:	3301      	adds	r3, #1
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	60bb      	str	r3, [r7, #8]
      break;
 80023de:	e002      	b.n	80023e6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80023e2:	60bb      	str	r3, [r7, #8]
      break;
 80023e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023e6:	68bb      	ldr	r3, [r7, #8]
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdb0      	pop	{r4, r5, r7, pc}
 80023f0:	40023800 	.word	0x40023800
 80023f4:	00f42400 	.word	0x00f42400
 80023f8:	017d7840 	.word	0x017d7840

080023fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <HAL_RCC_GetHCLKFreq+0x10>)
 8002402:	681b      	ldr	r3, [r3, #0]
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr
 800240c:	20000060 	.word	0x20000060

08002410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8002416:	f7ff fff1 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 800241a:	4601      	mov	r1, r0
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002424:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8002428:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	fa92 f2a2 	rbit	r2, r2
 8002430:	603a      	str	r2, [r7, #0]
  return result;
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	fab2 f282 	clz	r2, r2
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	40d3      	lsrs	r3, r2
 800243c:	4a04      	ldr	r2, [pc, #16]	; (8002450 <HAL_RCC_GetPCLK1Freq+0x40>)
 800243e:	5cd3      	ldrb	r3, [r2, r3]
 8002440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40023800 	.word	0x40023800
 8002450:	08003bd8 	.word	0x08003bd8

08002454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800245a:	f7ff ffcf 	bl	80023fc <HAL_RCC_GetHCLKFreq>
 800245e:	4601      	mov	r1, r0
 8002460:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002468:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800246c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	fa92 f2a2 	rbit	r2, r2
 8002474:	603a      	str	r2, [r7, #0]
  return result;
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	fab2 f282 	clz	r2, r2
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	40d3      	lsrs	r3, r2
 8002480:	4a04      	ldr	r2, [pc, #16]	; (8002494 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	3708      	adds	r7, #8
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40023800 	.word	0x40023800
 8002494:	08003bd8 	.word	0x08003bd8

08002498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e041      	b.n	800252e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7fe fe50 	bl	8001164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2202      	movs	r2, #2
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3304      	adds	r3, #4
 80024d4:	4619      	mov	r1, r3
 80024d6:	4610      	mov	r0, r2
 80024d8:	f000 fad0 	bl	8002a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2201      	movs	r2, #1
 80024e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2201      	movs	r2, #1
 8002508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d101      	bne.n	8002548 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e041      	b.n	80025cc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d106      	bne.n	8002562 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f839 	bl	80025d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	4619      	mov	r1, r3
 8002574:	4610      	mov	r0, r2
 8002576:	f000 fa81 	bl	8002a7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2201      	movs	r2, #1
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2201      	movs	r2, #1
 80025a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2201      	movs	r2, #1
 80025be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3708      	adds	r7, #8
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr
	...

080025e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d109      	bne.n	800260c <HAL_TIM_PWM_Start+0x24>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025fe:	b2db      	uxtb	r3, r3
 8002600:	2b01      	cmp	r3, #1
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e022      	b.n	8002652 <HAL_TIM_PWM_Start+0x6a>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d109      	bne.n	8002626 <HAL_TIM_PWM_Start+0x3e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b01      	cmp	r3, #1
 800261c:	bf14      	ite	ne
 800261e:	2301      	movne	r3, #1
 8002620:	2300      	moveq	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	e015      	b.n	8002652 <HAL_TIM_PWM_Start+0x6a>
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2b08      	cmp	r3, #8
 800262a:	d109      	bne.n	8002640 <HAL_TIM_PWM_Start+0x58>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	bf14      	ite	ne
 8002638:	2301      	movne	r3, #1
 800263a:	2300      	moveq	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e008      	b.n	8002652 <HAL_TIM_PWM_Start+0x6a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b01      	cmp	r3, #1
 800264a:	bf14      	ite	ne
 800264c:	2301      	movne	r3, #1
 800264e:	2300      	moveq	r3, #0
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07c      	b.n	8002754 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d104      	bne.n	800266a <HAL_TIM_PWM_Start+0x82>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2202      	movs	r2, #2
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002668:	e013      	b.n	8002692 <HAL_TIM_PWM_Start+0xaa>
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d104      	bne.n	800267a <HAL_TIM_PWM_Start+0x92>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002678:	e00b      	b.n	8002692 <HAL_TIM_PWM_Start+0xaa>
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	2b08      	cmp	r3, #8
 800267e:	d104      	bne.n	800268a <HAL_TIM_PWM_Start+0xa2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002688:	e003      	b.n	8002692 <HAL_TIM_PWM_Start+0xaa>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2202      	movs	r2, #2
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2201      	movs	r2, #1
 8002698:	6839      	ldr	r1, [r7, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fcce 	bl	800303c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2d      	ldr	r2, [pc, #180]	; (800275c <HAL_TIM_PWM_Start+0x174>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d004      	beq.n	80026b4 <HAL_TIM_PWM_Start+0xcc>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2c      	ldr	r2, [pc, #176]	; (8002760 <HAL_TIM_PWM_Start+0x178>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d101      	bne.n	80026b8 <HAL_TIM_PWM_Start+0xd0>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e000      	b.n	80026ba <HAL_TIM_PWM_Start+0xd2>
 80026b8:	2300      	movs	r3, #0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a22      	ldr	r2, [pc, #136]	; (800275c <HAL_TIM_PWM_Start+0x174>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d022      	beq.n	800271e <HAL_TIM_PWM_Start+0x136>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026e0:	d01d      	beq.n	800271e <HAL_TIM_PWM_Start+0x136>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1f      	ldr	r2, [pc, #124]	; (8002764 <HAL_TIM_PWM_Start+0x17c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d018      	beq.n	800271e <HAL_TIM_PWM_Start+0x136>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_TIM_PWM_Start+0x180>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_TIM_PWM_Start+0x136>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_TIM_PWM_Start+0x184>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d00e      	beq.n	800271e <HAL_TIM_PWM_Start+0x136>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_TIM_PWM_Start+0x178>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_TIM_PWM_Start+0x136>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a18      	ldr	r2, [pc, #96]	; (8002770 <HAL_TIM_PWM_Start+0x188>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d004      	beq.n	800271e <HAL_TIM_PWM_Start+0x136>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a16      	ldr	r2, [pc, #88]	; (8002774 <HAL_TIM_PWM_Start+0x18c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d111      	bne.n	8002742 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 0307 	and.w	r3, r3, #7
 8002728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d010      	beq.n	8002752 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002740:	e007      	b.n	8002752 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40010000 	.word	0x40010000
 8002760:	40010400 	.word	0x40010400
 8002764:	40000400 	.word	0x40000400
 8002768:	40000800 	.word	0x40000800
 800276c:	40000c00 	.word	0x40000c00
 8002770:	40014000 	.word	0x40014000
 8002774:	40001800 	.word	0x40001800

08002778 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800278a:	2b01      	cmp	r3, #1
 800278c:	d101      	bne.n	8002792 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800278e:	2302      	movs	r3, #2
 8002790:	e0ac      	b.n	80028ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b0c      	cmp	r3, #12
 800279e:	f200 809f 	bhi.w	80028e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80027a2:	a201      	add	r2, pc, #4	; (adr r2, 80027a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80027a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a8:	080027dd 	.word	0x080027dd
 80027ac:	080028e1 	.word	0x080028e1
 80027b0:	080028e1 	.word	0x080028e1
 80027b4:	080028e1 	.word	0x080028e1
 80027b8:	0800281d 	.word	0x0800281d
 80027bc:	080028e1 	.word	0x080028e1
 80027c0:	080028e1 	.word	0x080028e1
 80027c4:	080028e1 	.word	0x080028e1
 80027c8:	0800285f 	.word	0x0800285f
 80027cc:	080028e1 	.word	0x080028e1
 80027d0:	080028e1 	.word	0x080028e1
 80027d4:	080028e1 	.word	0x080028e1
 80027d8:	0800289f 	.word	0x0800289f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	68b9      	ldr	r1, [r7, #8]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f000 f9e8 	bl	8002bb8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0208 	orr.w	r2, r2, #8
 80027f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	699a      	ldr	r2, [r3, #24]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f022 0204 	bic.w	r2, r2, #4
 8002806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6999      	ldr	r1, [r3, #24]
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	691a      	ldr	r2, [r3, #16]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	619a      	str	r2, [r3, #24]
      break;
 800281a:	e062      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	4618      	mov	r0, r3
 8002824:	f000 fa38 	bl	8002c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	699a      	ldr	r2, [r3, #24]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	699a      	ldr	r2, [r3, #24]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6999      	ldr	r1, [r3, #24]
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	021a      	lsls	r2, r3, #8
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	619a      	str	r2, [r3, #24]
      break;
 800285c:	e041      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68b9      	ldr	r1, [r7, #8]
 8002864:	4618      	mov	r0, r3
 8002866:	f000 fa8b 	bl	8002d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	69da      	ldr	r2, [r3, #28]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f042 0208 	orr.w	r2, r2, #8
 8002878:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	69da      	ldr	r2, [r3, #28]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0204 	bic.w	r2, r2, #4
 8002888:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	69d9      	ldr	r1, [r3, #28]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	61da      	str	r2, [r3, #28]
      break;
 800289c:	e021      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f000 fadf 	bl	8002e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69d9      	ldr	r1, [r3, #28]
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	021a      	lsls	r2, r3, #8
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	61da      	str	r2, [r3, #28]
      break;
 80028de:	e000      	b.n	80028e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80028e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ea:	2300      	movs	r3, #0
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_TIM_ConfigClockSource+0x18>
 8002908:	2302      	movs	r3, #2
 800290a:	e0b3      	b.n	8002a74 <HAL_TIM_ConfigClockSource+0x180>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2202      	movs	r2, #2
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800292a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002944:	d03e      	beq.n	80029c4 <HAL_TIM_ConfigClockSource+0xd0>
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294a:	f200 8087 	bhi.w	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800294e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002952:	f000 8085 	beq.w	8002a60 <HAL_TIM_ConfigClockSource+0x16c>
 8002956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800295a:	d87f      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800295c:	2b70      	cmp	r3, #112	; 0x70
 800295e:	d01a      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0xa2>
 8002960:	2b70      	cmp	r3, #112	; 0x70
 8002962:	d87b      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 8002964:	2b60      	cmp	r3, #96	; 0x60
 8002966:	d050      	beq.n	8002a0a <HAL_TIM_ConfigClockSource+0x116>
 8002968:	2b60      	cmp	r3, #96	; 0x60
 800296a:	d877      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800296c:	2b50      	cmp	r3, #80	; 0x50
 800296e:	d03c      	beq.n	80029ea <HAL_TIM_ConfigClockSource+0xf6>
 8002970:	2b50      	cmp	r3, #80	; 0x50
 8002972:	d873      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 8002974:	2b40      	cmp	r3, #64	; 0x40
 8002976:	d058      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0x136>
 8002978:	2b40      	cmp	r3, #64	; 0x40
 800297a:	d86f      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800297c:	2b30      	cmp	r3, #48	; 0x30
 800297e:	d064      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
 8002980:	2b30      	cmp	r3, #48	; 0x30
 8002982:	d86b      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 8002984:	2b20      	cmp	r3, #32
 8002986:	d060      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
 8002988:	2b20      	cmp	r3, #32
 800298a:	d867      	bhi.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
 800298c:	2b00      	cmp	r3, #0
 800298e:	d05c      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
 8002990:	2b10      	cmp	r3, #16
 8002992:	d05a      	beq.n	8002a4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002994:	e062      	b.n	8002a5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6899      	ldr	r1, [r3, #8]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685a      	ldr	r2, [r3, #4]
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f000 fb2a 	bl	8002ffe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80029b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	609a      	str	r2, [r3, #8]
      break;
 80029c2:	e04e      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	6899      	ldr	r1, [r3, #8]
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685a      	ldr	r2, [r3, #4]
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f000 fb13 	bl	8002ffe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029e6:	609a      	str	r2, [r3, #8]
      break;
 80029e8:	e03b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	6859      	ldr	r1, [r3, #4]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	461a      	mov	r2, r3
 80029f8:	f000 fa8a 	bl	8002f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2150      	movs	r1, #80	; 0x50
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 fae1 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002a08:	e02b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6818      	ldr	r0, [r3, #0]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	6859      	ldr	r1, [r3, #4]
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	461a      	mov	r2, r3
 8002a18:	f000 faa8 	bl	8002f6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	2160      	movs	r1, #96	; 0x60
 8002a22:	4618      	mov	r0, r3
 8002a24:	f000 fad1 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002a28:	e01b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6859      	ldr	r1, [r3, #4]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f000 fa6a 	bl	8002f10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2140      	movs	r1, #64	; 0x40
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 fac1 	bl	8002fca <TIM_ITRx_SetConfig>
      break;
 8002a48:	e00b      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4619      	mov	r1, r3
 8002a54:	4610      	mov	r0, r2
 8002a56:	f000 fab8 	bl	8002fca <TIM_ITRx_SetConfig>
        break;
 8002a5a:	e002      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a5c:	bf00      	nop
 8002a5e:	e000      	b.n	8002a62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002a60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a3f      	ldr	r2, [pc, #252]	; (8002b8c <TIM_Base_SetConfig+0x110>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d00f      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3c      	ldr	r2, [pc, #240]	; (8002b90 <TIM_Base_SetConfig+0x114>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a3b      	ldr	r2, [pc, #236]	; (8002b94 <TIM_Base_SetConfig+0x118>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3a      	ldr	r2, [pc, #232]	; (8002b98 <TIM_Base_SetConfig+0x11c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_Base_SetConfig+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a39      	ldr	r2, [pc, #228]	; (8002b9c <TIM_Base_SetConfig+0x120>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d108      	bne.n	8002ace <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <TIM_Base_SetConfig+0x110>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d02b      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d027      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2b      	ldr	r2, [pc, #172]	; (8002b90 <TIM_Base_SetConfig+0x114>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d023      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <TIM_Base_SetConfig+0x118>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d01f      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a29      	ldr	r2, [pc, #164]	; (8002b98 <TIM_Base_SetConfig+0x11c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d01b      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a28      	ldr	r2, [pc, #160]	; (8002b9c <TIM_Base_SetConfig+0x120>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d017      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <TIM_Base_SetConfig+0x124>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a26      	ldr	r2, [pc, #152]	; (8002ba4 <TIM_Base_SetConfig+0x128>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00f      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a25      	ldr	r2, [pc, #148]	; (8002ba8 <TIM_Base_SetConfig+0x12c>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d00b      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a24      	ldr	r2, [pc, #144]	; (8002bac <TIM_Base_SetConfig+0x130>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d007      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <TIM_Base_SetConfig+0x134>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d003      	beq.n	8002b2e <TIM_Base_SetConfig+0xb2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a22      	ldr	r2, [pc, #136]	; (8002bb4 <TIM_Base_SetConfig+0x138>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d108      	bne.n	8002b40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a09      	ldr	r2, [pc, #36]	; (8002b8c <TIM_Base_SetConfig+0x110>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0xf8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0b      	ldr	r2, [pc, #44]	; (8002b9c <TIM_Base_SetConfig+0x120>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d103      	bne.n	8002b7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	691a      	ldr	r2, [r3, #16]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	615a      	str	r2, [r3, #20]
}
 8002b82:	bf00      	nop
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	40010000 	.word	0x40010000
 8002b90:	40000400 	.word	0x40000400
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40000c00 	.word	0x40000c00
 8002b9c:	40010400 	.word	0x40010400
 8002ba0:	40014000 	.word	0x40014000
 8002ba4:	40014400 	.word	0x40014400
 8002ba8:	40014800 	.word	0x40014800
 8002bac:	40001800 	.word	0x40001800
 8002bb0:	40001c00 	.word	0x40001c00
 8002bb4:	40002000 	.word	0x40002000

08002bb8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f023 0201 	bic.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0303 	bic.w	r3, r3, #3
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f023 0302 	bic.w	r3, r3, #2
 8002c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <TIM_OC1_SetConfig+0xd8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_OC1_SetConfig+0x64>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <TIM_OC1_SetConfig+0xdc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d10c      	bne.n	8002c36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f023 0308 	bic.w	r3, r3, #8
 8002c22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f023 0304 	bic.w	r3, r3, #4
 8002c34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <TIM_OC1_SetConfig+0xd8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d003      	beq.n	8002c46 <TIM_OC1_SetConfig+0x8e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a14      	ldr	r2, [pc, #80]	; (8002c94 <TIM_OC1_SetConfig+0xdc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d111      	bne.n	8002c6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685a      	ldr	r2, [r3, #4]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	621a      	str	r2, [r3, #32]
}
 8002c84:	bf00      	nop
 8002c86:	371c      	adds	r7, #28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40010400 	.word	0x40010400

08002c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	f023 0210 	bic.w	r2, r3, #16
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	021b      	lsls	r3, r3, #8
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f023 0320 	bic.w	r3, r3, #32
 8002ce2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a21      	ldr	r2, [pc, #132]	; (8002d78 <TIM_OC2_SetConfig+0xe0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_OC2_SetConfig+0x68>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a20      	ldr	r2, [pc, #128]	; (8002d7c <TIM_OC2_SetConfig+0xe4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10d      	bne.n	8002d1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	011b      	lsls	r3, r3, #4
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a16      	ldr	r2, [pc, #88]	; (8002d78 <TIM_OC2_SetConfig+0xe0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_OC2_SetConfig+0x94>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a15      	ldr	r2, [pc, #84]	; (8002d7c <TIM_OC2_SetConfig+0xe4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d113      	bne.n	8002d54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002d3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	621a      	str	r2, [r3, #32]
}
 8002d6e:	bf00      	nop
 8002d70:	371c      	adds	r7, #28
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	40010000 	.word	0x40010000
 8002d7c:	40010400 	.word	0x40010400

08002d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b087      	sub	sp, #28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	021b      	lsls	r3, r3, #8
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a21      	ldr	r2, [pc, #132]	; (8002e60 <TIM_OC3_SetConfig+0xe0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d003      	beq.n	8002de6 <TIM_OC3_SetConfig+0x66>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a20      	ldr	r2, [pc, #128]	; (8002e64 <TIM_OC3_SetConfig+0xe4>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d10d      	bne.n	8002e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	021b      	lsls	r3, r3, #8
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <TIM_OC3_SetConfig+0xe0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d003      	beq.n	8002e12 <TIM_OC3_SetConfig+0x92>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a15      	ldr	r2, [pc, #84]	; (8002e64 <TIM_OC3_SetConfig+0xe4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d113      	bne.n	8002e3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	011b      	lsls	r3, r3, #4
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	011b      	lsls	r3, r3, #4
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	697a      	ldr	r2, [r7, #20]
 8002e52:	621a      	str	r2, [r3, #32]
}
 8002e54:	bf00      	nop
 8002e56:	371c      	adds	r7, #28
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bc80      	pop	{r7}
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40010000 	.word	0x40010000
 8002e64:	40010400 	.word	0x40010400

08002e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	021b      	lsls	r3, r3, #8
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	031b      	lsls	r3, r3, #12
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a11      	ldr	r2, [pc, #68]	; (8002f08 <TIM_OC4_SetConfig+0xa0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d003      	beq.n	8002ed0 <TIM_OC4_SetConfig+0x68>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <TIM_OC4_SetConfig+0xa4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d109      	bne.n	8002ee4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	019b      	lsls	r3, r3, #6
 8002ede:	697a      	ldr	r2, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685a      	ldr	r2, [r3, #4]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	621a      	str	r2, [r3, #32]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	40010000 	.word	0x40010000
 8002f0c:	40010400 	.word	0x40010400

08002f10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	f023 0201 	bic.w	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	f023 030a 	bic.w	r3, r3, #10
 8002f4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	621a      	str	r2, [r3, #32]
}
 8002f62:	bf00      	nop
 8002f64:	371c      	adds	r7, #28
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bc80      	pop	{r7}
 8002f6a:	4770      	bx	lr

08002f6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6a1b      	ldr	r3, [r3, #32]
 8002f7c:	f023 0210 	bic.w	r2, r3, #16
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	031b      	lsls	r3, r3, #12
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	621a      	str	r2, [r3, #32]
}
 8002fc0:	bf00      	nop
 8002fc2:	371c      	adds	r7, #28
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr

08002fca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b085      	sub	sp, #20
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
 8002fd2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fe0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	f043 0307 	orr.w	r3, r3, #7
 8002fec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	609a      	str	r2, [r3, #8]
}
 8002ff4:	bf00      	nop
 8002ff6:	3714      	adds	r7, #20
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr

08002ffe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
 800300a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003018:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	021a      	lsls	r2, r3, #8
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	431a      	orrs	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	4313      	orrs	r3, r2
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4313      	orrs	r3, r2
 800302a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	609a      	str	r2, [r3, #8]
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800303c:	b480      	push	{r7}
 800303e:	b087      	sub	sp, #28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	2201      	movs	r2, #1
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6a1a      	ldr	r2, [r3, #32]
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	fa01 f303 	lsl.w	r3, r1, r3
 8003074:	431a      	orrs	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
}
 800307a:	bf00      	nop
 800307c:	371c      	adds	r7, #28
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003098:	2302      	movs	r3, #2
 800309a:	e05a      	b.n	8003152 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2202      	movs	r2, #2
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d022      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e8:	d01d      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d018      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a1a      	ldr	r2, [pc, #104]	; (8003164 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d013      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a19      	ldr	r2, [pc, #100]	; (8003168 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d00e      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a17      	ldr	r2, [pc, #92]	; (800316c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d009      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a16      	ldr	r2, [pc, #88]	; (8003170 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d004      	beq.n	8003126 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d10c      	bne.n	8003140 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	68ba      	ldr	r2, [r7, #8]
 8003134:	4313      	orrs	r3, r2
 8003136:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	bc80      	pop	{r7}
 800315a:	4770      	bx	lr
 800315c:	40010000 	.word	0x40010000
 8003160:	40000400 	.word	0x40000400
 8003164:	40000800 	.word	0x40000800
 8003168:	40000c00 	.word	0x40000c00
 800316c:	40010400 	.word	0x40010400
 8003170:	40014000 	.word	0x40014000
 8003174:	40001800 	.word	0x40001800

08003178 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003190:	2302      	movs	r3, #2
 8003192:	e03d      	b.n	8003210 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	bc80      	pop	{r7}
 8003218:	4770      	bx	lr

0800321a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d101      	bne.n	800322c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	e03f      	b.n	80032ac <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7fe f8b7 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2224      	movs	r2, #36	; 0x24
 800324a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fb90 	bl	8003984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003272:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695a      	ldr	r2, [r3, #20]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003282:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003292:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08a      	sub	sp, #40	; 0x28
 80032b8:	af02      	add	r7, sp, #8
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	603b      	str	r3, [r7, #0]
 80032c0:	4613      	mov	r3, r2
 80032c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b20      	cmp	r3, #32
 80032d2:	f040 8089 	bne.w	80033e8 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <HAL_UART_Receive+0x2e>
 80032dc:	88fb      	ldrh	r3, [r7, #6]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e081      	b.n	80033ea <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d101      	bne.n	80032f4 <HAL_UART_Receive+0x40>
 80032f0:	2302      	movs	r3, #2
 80032f2:	e07a      	b.n	80033ea <HAL_UART_Receive+0x136>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2222      	movs	r2, #34	; 0x22
 8003306:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800330a:	f7fe f9af 	bl	800166c <HAL_GetTick>
 800330e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	88fa      	ldrh	r2, [r7, #6]
 8003314:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	88fa      	ldrh	r2, [r7, #6]
 800331a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003324:	d108      	bne.n	8003338 <HAL_UART_Receive+0x84>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d104      	bne.n	8003338 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	e003      	b.n	8003340 <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003348:	e043      	b.n	80033d2 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	9300      	str	r3, [sp, #0]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2200      	movs	r2, #0
 8003352:	2120      	movs	r1, #32
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f9b3 	bl	80036c0 <UART_WaitOnFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e042      	b.n	80033ea <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10c      	bne.n	8003384 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	b29b      	uxth	r3, r3
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	b29a      	uxth	r2, r3
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800337c:	69bb      	ldr	r3, [r7, #24]
 800337e:	3302      	adds	r3, #2
 8003380:	61bb      	str	r3, [r7, #24]
 8003382:	e01f      	b.n	80033c4 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338c:	d007      	beq.n	800339e <HAL_UART_Receive+0xea>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10a      	bne.n	80033ac <HAL_UART_Receive+0xf8>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d106      	bne.n	80033ac <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	b2da      	uxtb	r2, r3
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e008      	b.n	80033be <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3301      	adds	r3, #1
 80033c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1b6      	bne.n	800334a <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2220      	movs	r2, #32
 80033e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	60f8      	str	r0, [r7, #12]
 80033fa:	60b9      	str	r1, [r7, #8]
 80033fc:	4613      	mov	r3, r2
 80033fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d140      	bne.n	800348e <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d002      	beq.n	8003418 <HAL_UART_Receive_IT+0x26>
 8003412:	88fb      	ldrh	r3, [r7, #6]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e039      	b.n	8003490 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_UART_Receive_IT+0x38>
 8003426:	2302      	movs	r3, #2
 8003428:	e032      	b.n	8003490 <HAL_UART_Receive_IT+0x9e>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	68ba      	ldr	r2, [r7, #8]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2222      	movs	r2, #34	; 0x22
 800344e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003468:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695a      	ldr	r2, [r3, #20]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f042 0201 	orr.w	r2, r2, #1
 8003478:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0220 	orr.w	r2, r2, #32
 8003488:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e000      	b.n	8003490 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800348e:	2302      	movs	r3, #2
  }
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr
	...

0800349c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b088      	sub	sp, #32
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034bc:	2300      	movs	r3, #0
 80034be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d10d      	bne.n	80034ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_UART_IRQHandler+0x52>
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	f003 0320 	and.w	r3, r3, #32
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9cc 	bl	8003884 <UART_Receive_IT>
      return;
 80034ec:	e0d0      	b.n	8003690 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80b0 	beq.w	8003656 <HAL_UART_IRQHandler+0x1ba>
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <HAL_UART_IRQHandler+0x70>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003506:	2b00      	cmp	r3, #0
 8003508:	f000 80a5 	beq.w	8003656 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_UART_IRQHandler+0x90>
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003524:	f043 0201 	orr.w	r2, r3, #1
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <HAL_UART_IRQHandler+0xb0>
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d005      	beq.n	800354c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003544:	f043 0202 	orr.w	r2, r3, #2
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_UART_IRQHandler+0xd0>
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	f003 0301 	and.w	r3, r3, #1
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	f043 0204 	orr.w	r2, r3, #4
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f003 0308 	and.w	r3, r3, #8
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00f      	beq.n	8003596 <HAL_UART_IRQHandler+0xfa>
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f003 0320 	and.w	r3, r3, #32
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <HAL_UART_IRQHandler+0xee>
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	2b00      	cmp	r3, #0
 8003588:	d005      	beq.n	8003596 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800358e:	f043 0208 	orr.w	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800359a:	2b00      	cmp	r3, #0
 800359c:	d077      	beq.n	800368e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0320 	and.w	r3, r3, #32
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_UART_IRQHandler+0x11c>
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	f003 0320 	and.w	r3, r3, #32
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d002      	beq.n	80035b8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f966 	bl	8003884 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	bf0c      	ite	eq
 80035c6:	2301      	moveq	r3, #1
 80035c8:	2300      	movne	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d2:	f003 0308 	and.w	r3, r3, #8
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_UART_IRQHandler+0x144>
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d031      	beq.n	8003644 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f000 f8b7 	bl	8003754 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	695b      	ldr	r3, [r3, #20]
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d123      	bne.n	800363c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <HAL_UART_IRQHandler+0x1fc>)
 8003612:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003618:	4618      	mov	r0, r3
 800361a:	f7fe f93e 	bl	800189a <HAL_DMA_Abort_IT>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d016      	beq.n	8003652 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800362e:	4610      	mov	r0, r2
 8003630:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003632:	e00e      	b.n	8003652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f83a 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800363a:	e00a      	b.n	8003652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f836 	bl	80036ae <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003642:	e006      	b.n	8003652 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f832 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003650:	e01d      	b.n	800368e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003652:	bf00      	nop
    return;
 8003654:	e01b      	b.n	800368e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_UART_IRQHandler+0x1d6>
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003666:	2b00      	cmp	r3, #0
 8003668:	d003      	beq.n	8003672 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 f8a3 	bl	80037b6 <UART_Transmit_IT>
    return;
 8003670:	e00e      	b.n	8003690 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003678:	2b00      	cmp	r3, #0
 800367a:	d009      	beq.n	8003690 <HAL_UART_IRQHandler+0x1f4>
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003682:	2b00      	cmp	r3, #0
 8003684:	d004      	beq.n	8003690 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f8e4 	bl	8003854 <UART_EndTransmit_IT>
    return;
 800368c:	e000      	b.n	8003690 <HAL_UART_IRQHandler+0x1f4>
    return;
 800368e:	bf00      	nop
  }
}
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	0800378f 	.word	0x0800378f

0800369c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bc80      	pop	{r7}
 80036ac:	4770      	bx	lr

080036ae <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036ae:	b480      	push	{r7}
 80036b0:	b083      	sub	sp, #12
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80036b6:	bf00      	nop
 80036b8:	370c      	adds	r7, #12
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	4613      	mov	r3, r2
 80036ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d0:	e02c      	b.n	800372c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d8:	d028      	beq.n	800372c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80036e0:	f7fd ffc4 	bl	800166c <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d21d      	bcs.n	800372c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68da      	ldr	r2, [r3, #12]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036fe:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0201 	bic.w	r2, r2, #1
 800370e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2220      	movs	r2, #32
 800371c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e00f      	b.n	800374c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	4013      	ands	r3, r2
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	461a      	mov	r2, r3
 8003744:	79fb      	ldrb	r3, [r7, #7]
 8003746:	429a      	cmp	r2, r3
 8003748:	d0c3      	beq.n	80036d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68da      	ldr	r2, [r3, #12]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800376a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr

0800378e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b084      	sub	sp, #16
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f7ff ff80 	bl	80036ae <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037ae:	bf00      	nop
 80037b0:	3710      	adds	r7, #16
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037b6:	b480      	push	{r7}
 80037b8:	b085      	sub	sp, #20
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b21      	cmp	r3, #33	; 0x21
 80037c8:	d13e      	bne.n	8003848 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d2:	d114      	bne.n	80037fe <UART_Transmit_IT+0x48>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d110      	bne.n	80037fe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	881b      	ldrh	r3, [r3, #0]
 80037e6:	461a      	mov	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	1c9a      	adds	r2, r3, #2
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	621a      	str	r2, [r3, #32]
 80037fc:	e008      	b.n	8003810 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	1c59      	adds	r1, r3, #1
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	6211      	str	r1, [r2, #32]
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003814:	b29b      	uxth	r3, r3
 8003816:	3b01      	subs	r3, #1
 8003818:	b29b      	uxth	r3, r3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	4619      	mov	r1, r3
 800381e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003832:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003842:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003844:	2300      	movs	r3, #0
 8003846:	e000      	b.n	800384a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003848:	2302      	movs	r3, #2
  }
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	bc80      	pop	{r7}
 8003852:	4770      	bx	lr

08003854 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003874:	6878      	ldr	r0, [r7, #4]
 8003876:	f7ff ff11 	bl	800369c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b22      	cmp	r3, #34	; 0x22
 8003896:	d170      	bne.n	800397a <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a0:	d117      	bne.n	80038d2 <UART_Receive_IT+0x4e>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d113      	bne.n	80038d2 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ca:	1c9a      	adds	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	629a      	str	r2, [r3, #40]	; 0x28
 80038d0:	e026      	b.n	8003920 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d6:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e4:	d007      	beq.n	80038f6 <UART_Receive_IT+0x72>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10a      	bne.n	8003904 <UART_Receive_IT+0x80>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	b2da      	uxtb	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	701a      	strb	r2, [r3, #0]
 8003902:	e008      	b.n	8003916 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003910:	b2da      	uxtb	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800391a:	1c5a      	adds	r2, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b01      	subs	r3, #1
 8003928:	b29b      	uxth	r3, r3
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	4619      	mov	r1, r3
 800392e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003930:	2b00      	cmp	r3, #0
 8003932:	d120      	bne.n	8003976 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0220 	bic.w	r2, r2, #32
 8003942:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68da      	ldr	r2, [r3, #12]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003952:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695a      	ldr	r2, [r3, #20]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 0201 	bic.w	r2, r2, #1
 8003962:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f7fc ff6b 	bl	8000848 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	e002      	b.n	800397c <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	e000      	b.n	800397c <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800397a:	2302      	movs	r3, #2
  }
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	431a      	orrs	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69db      	ldr	r3, [r3, #28]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80039c4:	f023 030c 	bic.w	r3, r3, #12
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6812      	ldr	r2, [r2, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	430b      	orrs	r3, r1
 80039d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	699a      	ldr	r2, [r3, #24]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a57      	ldr	r2, [pc, #348]	; (8003b4c <UART_SetConfig+0x1c8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d004      	beq.n	80039fc <UART_SetConfig+0x78>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <UART_SetConfig+0x1cc>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d103      	bne.n	8003a04 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7fe fd2a 	bl	8002454 <HAL_RCC_GetPCLK2Freq>
 8003a00:	60f8      	str	r0, [r7, #12]
 8003a02:	e002      	b.n	8003a0a <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a04:	f7fe fd04 	bl	8002410 <HAL_RCC_GetPCLK1Freq>
 8003a08:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a12:	d14c      	bne.n	8003aae <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	4613      	mov	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009a      	lsls	r2, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2a:	4a4a      	ldr	r2, [pc, #296]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	095b      	lsrs	r3, r3, #5
 8003a32:	0119      	lsls	r1, r3, #4
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009a      	lsls	r2, r3, #2
 8003a3e:	441a      	add	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	005b      	lsls	r3, r3, #1
 8003a46:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a4a:	4b42      	ldr	r3, [pc, #264]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003a4c:	fba3 0302 	umull	r0, r3, r3, r2
 8003a50:	095b      	lsrs	r3, r3, #5
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	fb00 f303 	mul.w	r3, r0, r3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	3332      	adds	r3, #50	; 0x32
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	095b      	lsrs	r3, r3, #5
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a6c:	4419      	add	r1, r3
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	4613      	mov	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	4413      	add	r3, r2
 8003a76:	009a      	lsls	r2, r3, #2
 8003a78:	441a      	add	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	005b      	lsls	r3, r3, #1
 8003a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a84:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003a86:	fba3 0302 	umull	r0, r3, r3, r2
 8003a8a:	095b      	lsrs	r3, r3, #5
 8003a8c:	2064      	movs	r0, #100	; 0x64
 8003a8e:	fb00 f303 	mul.w	r3, r0, r3
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	3332      	adds	r3, #50	; 0x32
 8003a98:	4a2e      	ldr	r2, [pc, #184]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9e:	095b      	lsrs	r3, r3, #5
 8003aa0:	f003 0207 	and.w	r2, r3, #7
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	440a      	add	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003aac:	e04a      	b.n	8003b44 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009a      	lsls	r2, r3, #2
 8003ab8:	441a      	add	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	0119      	lsls	r1, r3, #4
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2064      	movs	r0, #100	; 0x64
 8003aee:	fb00 f303 	mul.w	r3, r0, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3332      	adds	r3, #50	; 0x32
 8003af8:	4a16      	ldr	r2, [pc, #88]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	4419      	add	r1, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b1c:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2064      	movs	r0, #100	; 0x64
 8003b26:	fb00 f303 	mul.w	r3, r0, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a08      	ldr	r2, [pc, #32]	; (8003b54 <UART_SetConfig+0x1d0>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	440a      	add	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40011000 	.word	0x40011000
 8003b50:	40011400 	.word	0x40011400
 8003b54:	51eb851f 	.word	0x51eb851f

08003b58 <__libc_init_array>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	2600      	movs	r6, #0
 8003b5c:	4d0c      	ldr	r5, [pc, #48]	; (8003b90 <__libc_init_array+0x38>)
 8003b5e:	4c0d      	ldr	r4, [pc, #52]	; (8003b94 <__libc_init_array+0x3c>)
 8003b60:	1b64      	subs	r4, r4, r5
 8003b62:	10a4      	asrs	r4, r4, #2
 8003b64:	42a6      	cmp	r6, r4
 8003b66:	d109      	bne.n	8003b7c <__libc_init_array+0x24>
 8003b68:	f000 f822 	bl	8003bb0 <_init>
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	4d0a      	ldr	r5, [pc, #40]	; (8003b98 <__libc_init_array+0x40>)
 8003b70:	4c0a      	ldr	r4, [pc, #40]	; (8003b9c <__libc_init_array+0x44>)
 8003b72:	1b64      	subs	r4, r4, r5
 8003b74:	10a4      	asrs	r4, r4, #2
 8003b76:	42a6      	cmp	r6, r4
 8003b78:	d105      	bne.n	8003b86 <__libc_init_array+0x2e>
 8003b7a:	bd70      	pop	{r4, r5, r6, pc}
 8003b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b80:	4798      	blx	r3
 8003b82:	3601      	adds	r6, #1
 8003b84:	e7ee      	b.n	8003b64 <__libc_init_array+0xc>
 8003b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b8a:	4798      	blx	r3
 8003b8c:	3601      	adds	r6, #1
 8003b8e:	e7f2      	b.n	8003b76 <__libc_init_array+0x1e>
 8003b90:	08003be8 	.word	0x08003be8
 8003b94:	08003be8 	.word	0x08003be8
 8003b98:	08003be8 	.word	0x08003be8
 8003b9c:	08003bec 	.word	0x08003bec

08003ba0 <memset>:
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	4402      	add	r2, r0
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d100      	bne.n	8003baa <memset+0xa>
 8003ba8:	4770      	bx	lr
 8003baa:	f803 1b01 	strb.w	r1, [r3], #1
 8003bae:	e7f9      	b.n	8003ba4 <memset+0x4>

08003bb0 <_init>:
 8003bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb2:	bf00      	nop
 8003bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb6:	bc08      	pop	{r3}
 8003bb8:	469e      	mov	lr, r3
 8003bba:	4770      	bx	lr

08003bbc <_fini>:
 8003bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bbe:	bf00      	nop
 8003bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bc2:	bc08      	pop	{r3}
 8003bc4:	469e      	mov	lr, r3
 8003bc6:	4770      	bx	lr
